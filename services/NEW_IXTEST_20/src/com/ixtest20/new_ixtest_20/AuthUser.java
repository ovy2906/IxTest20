/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * AuthUser generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`AUTH_USER`")
public class AuthUser implements Serializable {

    private BigInteger id;
    private String password;
    @Type(type = "DateTime")
    private LocalDateTime lastLogin;
    private Integer isSuperuser;
    private String username;
    private String firstName;
    private String lastName;
    private String email;
    private Integer isStaff;
    private Integer isActive;
    @Type(type = "DateTime")
    private LocalDateTime dateJoined;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 19)
    public BigInteger getId() {
        return this.id;
    }

    public void setId(BigInteger id) {
        this.id = id;
    }

    @Column(name = "`PASSWORD`", nullable = true, length = 128)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "`LAST_LOGIN`", nullable = true)
    public LocalDateTime getLastLogin() {
        return this.lastLogin;
    }

    public void setLastLogin(LocalDateTime lastLogin) {
        this.lastLogin = lastLogin;
    }

    @Column(name = "`IS_SUPERUSER`", nullable = true, scale = 0, precision = 10)
    public Integer getIsSuperuser() {
        return this.isSuperuser;
    }

    public void setIsSuperuser(Integer isSuperuser) {
        this.isSuperuser = isSuperuser;
    }

    @Column(name = "`USERNAME`", nullable = true, length = 30)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "`FIRST_NAME`", nullable = true, length = 30)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "`LAST_NAME`", nullable = true, length = 30)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "`EMAIL`", nullable = true, length = 75)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "`IS_STAFF`", nullable = true, scale = 0, precision = 10)
    public Integer getIsStaff() {
        return this.isStaff;
    }

    public void setIsStaff(Integer isStaff) {
        this.isStaff = isStaff;
    }

    @Column(name = "`IS_ACTIVE`", nullable = true, scale = 0, precision = 10)
    public Integer getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Integer isActive) {
        this.isActive = isActive;
    }

    @Column(name = "`DATE_JOINED`", nullable = true)
    public LocalDateTime getDateJoined() {
        return this.dateJoined;
    }

    public void setDateJoined(LocalDateTime dateJoined) {
        this.dateJoined = dateJoined;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AuthUser)) return false;
        final AuthUser authUser = (AuthUser) o;
        return Objects.equals(getId(), authUser.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * AuthUserGroups generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`AUTH_USER_GROUPS`")
public class AuthUserGroups implements Serializable {

    private BigInteger id;
    private BigInteger userId;
    private BigInteger groupId;
    private AuthUser authUser;
    private AuthGroup authGroup;

    @Id
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 19)
    public BigInteger getId() {
        return this.id;
    }

    public void setId(BigInteger id) {
        this.id = id;
    }

    @Column(name = "`USER_ID`", nullable = true, scale = 0, precision = 19)
    public BigInteger getUserId() {
        return this.userId;
    }

    public void setUserId(BigInteger userId) {
        this.userId = userId;
    }

    @Column(name = "`GROUP_ID`", nullable = true, scale = 0, precision = 19)
    public BigInteger getGroupId() {
        return this.groupId;
    }

    public void setGroupId(BigInteger groupId) {
        this.groupId = groupId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`USER_ID`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public AuthUser getAuthUser() {
        return this.authUser;
    }

    public void setAuthUser(AuthUser authUser) {
        if(authUser != null) {
            this.userId = authUser.getId();
        }

        this.authUser = authUser;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`GROUP_ID`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public AuthGroup getAuthGroup() {
        return this.authGroup;
    }

    public void setAuthGroup(AuthGroup authGroup) {
        if(authGroup != null) {
            this.groupId = authGroup.getId();
        }

        this.authGroup = authGroup;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AuthUserGroups)) return false;
        final AuthUserGroups authUserGroups = (AuthUserGroups) o;
        return Objects.equals(getId(), authUserGroups.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}


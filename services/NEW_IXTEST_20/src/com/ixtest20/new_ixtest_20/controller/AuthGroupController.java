/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.AuthGroup;
import com.ixtest20.new_ixtest_20.AuthGroupPermissions;
import com.ixtest20.new_ixtest_20.AuthUserGroups;
import com.ixtest20.new_ixtest_20.service.AuthGroupService;

/**
 * Controller object for domain model class AuthGroup.
 * @see AuthGroup
 */
@RestController("NEW_IXTEST_20.AuthGroupController")
@Api(value = "AuthGroupController", description = "Exposes APIs to work with AuthGroup resource.")
@RequestMapping("/NEW_IXTEST_20/AuthGroup")
public class AuthGroupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthGroupController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthGroupService")
    private AuthGroupService authGroupService;

    @ApiOperation(value = "Creates a new AuthGroup instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthGroup createAuthGroup(@RequestBody AuthGroup authGroup) {
        LOGGER.debug("Create AuthGroup with information: {}", authGroup);
        authGroup = authGroupService.create(authGroup);
        LOGGER.debug("Created AuthGroup with information: {}", authGroup);
        return authGroup;
    }

    @ApiOperation(value = "Returns the AuthGroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthGroup getAuthGroup(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting AuthGroup with id: {}", id);
        AuthGroup foundAuthGroup = authGroupService.getById(id);
        LOGGER.debug("AuthGroup details with id: {}", foundAuthGroup);
        return foundAuthGroup;
    }

    @ApiOperation(value = "Updates the AuthGroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthGroup editAuthGroup(@PathVariable("id") BigInteger id, @RequestBody AuthGroup authGroup) throws EntityNotFoundException {
        LOGGER.debug("Editing AuthGroup with id: {}", authGroup.getId());
        authGroup.setId(id);
        authGroup = authGroupService.update(authGroup);
        LOGGER.debug("AuthGroup details with id: {}", authGroup);
        return authGroup;
    }

    @ApiOperation(value = "Deletes the AuthGroup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAuthGroup(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthGroup with id: {}", id);
        AuthGroup deletedAuthGroup = authGroupService.delete(id);
        return deletedAuthGroup != null;
    }

    /**
     * @deprecated Use {@link #findAuthGroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AuthGroup instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthGroup> searchAuthGroupsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AuthGroups list");
        return authGroupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of AuthGroup instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthGroup> findAuthGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AuthGroups list");
        return authGroupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAuthGroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return authGroupService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of AuthGroup instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countAuthGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AuthGroups");
        return authGroupService.count(query);
    }

    @RequestMapping(value = "/{id}/authGroupPermissionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the authGroupPermissionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthGroupPermissions> findAssociatedAuthGroupPermissionses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authGroupPermissionses");
        return authGroupService.findAssociatedAuthGroupPermissionses(id, pageable);
    }

    @RequestMapping(value = "/{id}/authUserGroupses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the authUserGroupses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserGroups> findAssociatedAuthUserGroupses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authUserGroupses");
        return authGroupService.findAssociatedAuthUserGroupses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthGroupService instance
	 */
    protected void setAuthGroupService(AuthGroupService service) {
        this.authGroupService = service;
    }
}

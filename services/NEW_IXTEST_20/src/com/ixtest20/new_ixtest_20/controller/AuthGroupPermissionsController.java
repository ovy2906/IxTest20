/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.AuthGroupPermissions;
import com.ixtest20.new_ixtest_20.service.AuthGroupPermissionsService;

/**
 * Controller object for domain model class AuthGroupPermissions.
 * @see AuthGroupPermissions
 */
@RestController("NEW_IXTEST_20.AuthGroupPermissionsController")
@Api(value = "AuthGroupPermissionsController", description = "Exposes APIs to work with AuthGroupPermissions resource.")
@RequestMapping("/NEW_IXTEST_20/AuthGroupPermissions")
public class AuthGroupPermissionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthGroupPermissionsController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthGroupPermissionsService")
    private AuthGroupPermissionsService authGroupPermissionsService;

    @ApiOperation(value = "Creates a new AuthGroupPermissions instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthGroupPermissions createAuthGroupPermissions(@RequestBody AuthGroupPermissions authGroupPermissions) {
        LOGGER.debug("Create AuthGroupPermissions with information: {}", authGroupPermissions);
        authGroupPermissions = authGroupPermissionsService.create(authGroupPermissions);
        LOGGER.debug("Created AuthGroupPermissions with information: {}", authGroupPermissions);
        return authGroupPermissions;
    }

    @ApiOperation(value = "Returns the AuthGroupPermissions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthGroupPermissions getAuthGroupPermissions(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting AuthGroupPermissions with id: {}", id);
        AuthGroupPermissions foundAuthGroupPermissions = authGroupPermissionsService.getById(id);
        LOGGER.debug("AuthGroupPermissions details with id: {}", foundAuthGroupPermissions);
        return foundAuthGroupPermissions;
    }

    @ApiOperation(value = "Updates the AuthGroupPermissions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthGroupPermissions editAuthGroupPermissions(@PathVariable("id") BigInteger id, @RequestBody AuthGroupPermissions authGroupPermissions) throws EntityNotFoundException {
        LOGGER.debug("Editing AuthGroupPermissions with id: {}", authGroupPermissions.getId());
        authGroupPermissions.setId(id);
        authGroupPermissions = authGroupPermissionsService.update(authGroupPermissions);
        LOGGER.debug("AuthGroupPermissions details with id: {}", authGroupPermissions);
        return authGroupPermissions;
    }

    @ApiOperation(value = "Deletes the AuthGroupPermissions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAuthGroupPermissions(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthGroupPermissions with id: {}", id);
        AuthGroupPermissions deletedAuthGroupPermissions = authGroupPermissionsService.delete(id);
        return deletedAuthGroupPermissions != null;
    }

    /**
     * @deprecated Use {@link #findAuthGroupPermissions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AuthGroupPermissions instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthGroupPermissions> searchAuthGroupPermissionsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AuthGroupPermissions list");
        return authGroupPermissionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of AuthGroupPermissions instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthGroupPermissions> findAuthGroupPermissions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AuthGroupPermissions list");
        return authGroupPermissionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAuthGroupPermissions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return authGroupPermissionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of AuthGroupPermissions instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countAuthGroupPermissions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AuthGroupPermissions");
        return authGroupPermissionsService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthGroupPermissionsService instance
	 */
    protected void setAuthGroupPermissionsService(AuthGroupPermissionsService service) {
        this.authGroupPermissionsService = service;
    }
}

/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.AuthGroupPermissions;
import com.ixtest20.new_ixtest_20.AuthPermission;
import com.ixtest20.new_ixtest_20.AuthUserUserPermissions;
import com.ixtest20.new_ixtest_20.service.AuthPermissionService;

/**
 * Controller object for domain model class AuthPermission.
 * @see AuthPermission
 */
@RestController("NEW_IXTEST_20.AuthPermissionController")
@Api(value = "AuthPermissionController", description = "Exposes APIs to work with AuthPermission resource.")
@RequestMapping("/NEW_IXTEST_20/AuthPermission")
public class AuthPermissionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthPermissionController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthPermissionService")
    private AuthPermissionService authPermissionService;

    @ApiOperation(value = "Creates a new AuthPermission instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthPermission createAuthPermission(@RequestBody AuthPermission authPermission) {
        LOGGER.debug("Create AuthPermission with information: {}", authPermission);
        authPermission = authPermissionService.create(authPermission);
        LOGGER.debug("Created AuthPermission with information: {}", authPermission);
        return authPermission;
    }

    @ApiOperation(value = "Returns the AuthPermission instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthPermission getAuthPermission(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting AuthPermission with id: {}", id);
        AuthPermission foundAuthPermission = authPermissionService.getById(id);
        LOGGER.debug("AuthPermission details with id: {}", foundAuthPermission);
        return foundAuthPermission;
    }

    @ApiOperation(value = "Updates the AuthPermission instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthPermission editAuthPermission(@PathVariable("id") BigInteger id, @RequestBody AuthPermission authPermission) throws EntityNotFoundException {
        LOGGER.debug("Editing AuthPermission with id: {}", authPermission.getId());
        authPermission.setId(id);
        authPermission = authPermissionService.update(authPermission);
        LOGGER.debug("AuthPermission details with id: {}", authPermission);
        return authPermission;
    }

    @ApiOperation(value = "Deletes the AuthPermission instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAuthPermission(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthPermission with id: {}", id);
        AuthPermission deletedAuthPermission = authPermissionService.delete(id);
        return deletedAuthPermission != null;
    }

    /**
     * @deprecated Use {@link #findAuthPermissions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AuthPermission instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthPermission> searchAuthPermissionsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AuthPermissions list");
        return authPermissionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of AuthPermission instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthPermission> findAuthPermissions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AuthPermissions list");
        return authPermissionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAuthPermissions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return authPermissionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of AuthPermission instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countAuthPermissions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AuthPermissions");
        return authPermissionService.count(query);
    }

    @RequestMapping(value = "/{id}/authGroupPermissionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the authGroupPermissionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthGroupPermissions> findAssociatedAuthGroupPermissionses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authGroupPermissionses");
        return authPermissionService.findAssociatedAuthGroupPermissionses(id, pageable);
    }

    @RequestMapping(value = "/{id}/authUserUserPermissionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the authUserUserPermissionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserUserPermissions> findAssociatedAuthUserUserPermissionses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authUserUserPermissionses");
        return authPermissionService.findAssociatedAuthUserUserPermissionses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthPermissionService instance
	 */
    protected void setAuthPermissionService(AuthPermissionService service) {
        this.authPermissionService = service;
    }
}

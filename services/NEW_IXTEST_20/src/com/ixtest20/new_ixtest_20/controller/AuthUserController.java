/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.AuthUser;
import com.ixtest20.new_ixtest_20.AuthUserGroups;
import com.ixtest20.new_ixtest_20.AuthUserUserPermissions;
import com.ixtest20.new_ixtest_20.service.AuthUserService;

/**
 * Controller object for domain model class AuthUser.
 * @see AuthUser
 */
@RestController("NEW_IXTEST_20.AuthUserController")
@Api(value = "AuthUserController", description = "Exposes APIs to work with AuthUser resource.")
@RequestMapping("/NEW_IXTEST_20/AuthUser")
public class AuthUserController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthUserController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthUserService")
    private AuthUserService authUserService;

    @ApiOperation(value = "Creates a new AuthUser instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUser createAuthUser(@RequestBody AuthUser authUser) {
        LOGGER.debug("Create AuthUser with information: {}", authUser);
        authUser = authUserService.create(authUser);
        LOGGER.debug("Created AuthUser with information: {}", authUser);
        return authUser;
    }

    @ApiOperation(value = "Returns the AuthUser instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUser getAuthUser(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting AuthUser with id: {}", id);
        AuthUser foundAuthUser = authUserService.getById(id);
        LOGGER.debug("AuthUser details with id: {}", foundAuthUser);
        return foundAuthUser;
    }

    @ApiOperation(value = "Updates the AuthUser instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUser editAuthUser(@PathVariable("id") BigInteger id, @RequestBody AuthUser authUser) throws EntityNotFoundException {
        LOGGER.debug("Editing AuthUser with id: {}", authUser.getId());
        authUser.setId(id);
        authUser = authUserService.update(authUser);
        LOGGER.debug("AuthUser details with id: {}", authUser);
        return authUser;
    }

    @ApiOperation(value = "Deletes the AuthUser instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAuthUser(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthUser with id: {}", id);
        AuthUser deletedAuthUser = authUserService.delete(id);
        return deletedAuthUser != null;
    }

    /**
     * @deprecated Use {@link #findAuthUsers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AuthUser instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUser> searchAuthUsersByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AuthUsers list");
        return authUserService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of AuthUser instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUser> findAuthUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AuthUsers list");
        return authUserService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAuthUsers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return authUserService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of AuthUser instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countAuthUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AuthUsers");
        return authUserService.count(query);
    }

    @RequestMapping(value = "/{id}/authUserGroupses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the authUserGroupses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserGroups> findAssociatedAuthUserGroupses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authUserGroupses");
        return authUserService.findAssociatedAuthUserGroupses(id, pageable);
    }

    @RequestMapping(value = "/{id}/authUserUserPermissionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the authUserUserPermissionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserUserPermissions> findAssociatedAuthUserUserPermissionses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authUserUserPermissionses");
        return authUserService.findAssociatedAuthUserUserPermissionses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthUserService instance
	 */
    protected void setAuthUserService(AuthUserService service) {
        this.authUserService = service;
    }
}

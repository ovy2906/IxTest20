/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.AuthUserGroups;
import com.ixtest20.new_ixtest_20.service.AuthUserGroupsService;

/**
 * Controller object for domain model class AuthUserGroups.
 * @see AuthUserGroups
 */
@RestController("NEW_IXTEST_20.AuthUserGroupsController")
@Api(value = "AuthUserGroupsController", description = "Exposes APIs to work with AuthUserGroups resource.")
@RequestMapping("/NEW_IXTEST_20/AuthUserGroups")
public class AuthUserGroupsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthUserGroupsController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthUserGroupsService")
    private AuthUserGroupsService authUserGroupsService;

    @ApiOperation(value = "Creates a new AuthUserGroups instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUserGroups createAuthUserGroups(@RequestBody AuthUserGroups authUserGroups) {
        LOGGER.debug("Create AuthUserGroups with information: {}", authUserGroups);
        authUserGroups = authUserGroupsService.create(authUserGroups);
        LOGGER.debug("Created AuthUserGroups with information: {}", authUserGroups);
        return authUserGroups;
    }

    @ApiOperation(value = "Returns the AuthUserGroups instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUserGroups getAuthUserGroups(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting AuthUserGroups with id: {}", id);
        AuthUserGroups foundAuthUserGroups = authUserGroupsService.getById(id);
        LOGGER.debug("AuthUserGroups details with id: {}", foundAuthUserGroups);
        return foundAuthUserGroups;
    }

    @ApiOperation(value = "Updates the AuthUserGroups instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUserGroups editAuthUserGroups(@PathVariable("id") BigInteger id, @RequestBody AuthUserGroups authUserGroups) throws EntityNotFoundException {
        LOGGER.debug("Editing AuthUserGroups with id: {}", authUserGroups.getId());
        authUserGroups.setId(id);
        authUserGroups = authUserGroupsService.update(authUserGroups);
        LOGGER.debug("AuthUserGroups details with id: {}", authUserGroups);
        return authUserGroups;
    }

    @ApiOperation(value = "Deletes the AuthUserGroups instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAuthUserGroups(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthUserGroups with id: {}", id);
        AuthUserGroups deletedAuthUserGroups = authUserGroupsService.delete(id);
        return deletedAuthUserGroups != null;
    }

    /**
     * @deprecated Use {@link #findAuthUserGroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AuthUserGroups instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserGroups> searchAuthUserGroupsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AuthUserGroups list");
        return authUserGroupsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of AuthUserGroups instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserGroups> findAuthUserGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AuthUserGroups list");
        return authUserGroupsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAuthUserGroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return authUserGroupsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of AuthUserGroups instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countAuthUserGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AuthUserGroups");
        return authUserGroupsService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthUserGroupsService instance
	 */
    protected void setAuthUserGroupsService(AuthUserGroupsService service) {
        this.authUserGroupsService = service;
    }
}

/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.AuthUserUserPermissions;
import com.ixtest20.new_ixtest_20.service.AuthUserUserPermissionsService;

/**
 * Controller object for domain model class AuthUserUserPermissions.
 * @see AuthUserUserPermissions
 */
@RestController("NEW_IXTEST_20.AuthUserUserPermissionsController")
@Api(value = "AuthUserUserPermissionsController", description = "Exposes APIs to work with AuthUserUserPermissions resource.")
@RequestMapping("/NEW_IXTEST_20/AuthUserUserPermissions")
public class AuthUserUserPermissionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthUserUserPermissionsController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthUserUserPermissionsService")
    private AuthUserUserPermissionsService authUserUserPermissionsService;

    @ApiOperation(value = "Creates a new AuthUserUserPermissions instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUserUserPermissions createAuthUserUserPermissions(@RequestBody AuthUserUserPermissions authUserUserPermissions) {
        LOGGER.debug("Create AuthUserUserPermissions with information: {}", authUserUserPermissions);
        authUserUserPermissions = authUserUserPermissionsService.create(authUserUserPermissions);
        LOGGER.debug("Created AuthUserUserPermissions with information: {}", authUserUserPermissions);
        return authUserUserPermissions;
    }

    @ApiOperation(value = "Returns the AuthUserUserPermissions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUserUserPermissions getAuthUserUserPermissions(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting AuthUserUserPermissions with id: {}", id);
        AuthUserUserPermissions foundAuthUserUserPermissions = authUserUserPermissionsService.getById(id);
        LOGGER.debug("AuthUserUserPermissions details with id: {}", foundAuthUserUserPermissions);
        return foundAuthUserUserPermissions;
    }

    @ApiOperation(value = "Updates the AuthUserUserPermissions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AuthUserUserPermissions editAuthUserUserPermissions(@PathVariable("id") BigInteger id, @RequestBody AuthUserUserPermissions authUserUserPermissions) throws EntityNotFoundException {
        LOGGER.debug("Editing AuthUserUserPermissions with id: {}", authUserUserPermissions.getId());
        authUserUserPermissions.setId(id);
        authUserUserPermissions = authUserUserPermissionsService.update(authUserUserPermissions);
        LOGGER.debug("AuthUserUserPermissions details with id: {}", authUserUserPermissions);
        return authUserUserPermissions;
    }

    @ApiOperation(value = "Deletes the AuthUserUserPermissions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAuthUserUserPermissions(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthUserUserPermissions with id: {}", id);
        AuthUserUserPermissions deletedAuthUserUserPermissions = authUserUserPermissionsService.delete(id);
        return deletedAuthUserUserPermissions != null;
    }

    /**
     * @deprecated Use {@link #findAuthUserUserPermissions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AuthUserUserPermissions instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserUserPermissions> searchAuthUserUserPermissionsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AuthUserUserPermissions list");
        return authUserUserPermissionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of AuthUserUserPermissions instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AuthUserUserPermissions> findAuthUserUserPermissions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AuthUserUserPermissions list");
        return authUserUserPermissionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAuthUserUserPermissions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return authUserUserPermissionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of AuthUserUserPermissions instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countAuthUserUserPermissions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AuthUserUserPermissions");
        return authUserUserPermissionsService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthUserUserPermissionsService instance
	 */
    protected void setAuthUserUserPermissionsService(AuthUserUserPermissionsService service) {
        this.authUserUserPermissionsService = service;
    }
}

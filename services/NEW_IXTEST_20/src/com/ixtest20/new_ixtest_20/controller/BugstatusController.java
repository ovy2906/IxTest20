/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Bugstatus;
import com.ixtest20.new_ixtest_20.service.BugstatusService;

/**
 * Controller object for domain model class Bugstatus.
 * @see Bugstatus
 */
@RestController("NEW_IXTEST_20.BugstatusController")
@Api(value = "BugstatusController", description = "Exposes APIs to work with Bugstatus resource.")
@RequestMapping("/NEW_IXTEST_20/Bugstatus")
public class BugstatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BugstatusController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.BugstatusService")
    private BugstatusService bugstatusService;

    @ApiOperation(value = "Creates a new Bugstatus instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bugstatus createBugstatus(@RequestBody Bugstatus bugstatusInstance) {
        LOGGER.debug("Create Bugstatus with information: {}", bugstatusInstance);
        bugstatusInstance = bugstatusService.create(bugstatusInstance);
        LOGGER.debug("Created Bugstatus with information: {}", bugstatusInstance);
        return bugstatusInstance;
    }

    @ApiOperation(value = "Returns the Bugstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bugstatus getBugstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Bugstatus with id: {}", id);
        Bugstatus foundBugstatus = bugstatusService.getById(id);
        LOGGER.debug("Bugstatus details with id: {}", foundBugstatus);
        return foundBugstatus;
    }

    @ApiOperation(value = "Updates the Bugstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bugstatus editBugstatus(@PathVariable("id") Integer id, @RequestBody Bugstatus bugstatusInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing Bugstatus with id: {}", bugstatusInstance.getStatusid());
        bugstatusInstance.setStatusid(id);
        bugstatusInstance = bugstatusService.update(bugstatusInstance);
        LOGGER.debug("Bugstatus details with id: {}", bugstatusInstance);
        return bugstatusInstance;
    }

    @ApiOperation(value = "Deletes the Bugstatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBugstatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bugstatus with id: {}", id);
        Bugstatus deletedBugstatus = bugstatusService.delete(id);
        return deletedBugstatus != null;
    }

    /**
     * @deprecated Use {@link #findBugstatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Bugstatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bugstatus> searchBugstatusesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Bugstatuses list");
        return bugstatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Bugstatus instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bugstatus> findBugstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Bugstatuses list");
        return bugstatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBugstatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return bugstatusService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Bugstatus instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countBugstatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Bugstatuses");
        return bugstatusService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BugstatusService instance
	 */
    protected void setBugstatusService(BugstatusService service) {
        this.bugstatusService = service;
    }
}

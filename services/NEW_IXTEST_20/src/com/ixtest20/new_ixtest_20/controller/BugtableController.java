/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Bugtable;
import com.ixtest20.new_ixtest_20.service.BugtableService;

/**
 * Controller object for domain model class Bugtable.
 * @see Bugtable
 */
@RestController("NEW_IXTEST_20.BugtableController")
@Api(value = "BugtableController", description = "Exposes APIs to work with Bugtable resource.")
@RequestMapping("/NEW_IXTEST_20/Bugtable")
public class BugtableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BugtableController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.BugtableService")
    private BugtableService bugtableService;

    @ApiOperation(value = "Creates a new Bugtable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bugtable createBugtable(@RequestBody Bugtable bugtable) {
        LOGGER.debug("Create Bugtable with information: {}", bugtable);
        bugtable = bugtableService.create(bugtable);
        LOGGER.debug("Created Bugtable with information: {}", bugtable);
        return bugtable;
    }

    @ApiOperation(value = "Returns the Bugtable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bugtable getBugtable(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Bugtable with id: {}", id);
        Bugtable foundBugtable = bugtableService.getById(id);
        LOGGER.debug("Bugtable details with id: {}", foundBugtable);
        return foundBugtable;
    }

    @ApiOperation(value = "Updates the Bugtable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bugtable editBugtable(@PathVariable("id") BigInteger id, @RequestBody Bugtable bugtable) throws EntityNotFoundException {
        LOGGER.debug("Editing Bugtable with id: {}", bugtable.getBugid());
        bugtable.setBugid(id);
        bugtable = bugtableService.update(bugtable);
        LOGGER.debug("Bugtable details with id: {}", bugtable);
        return bugtable;
    }

    @ApiOperation(value = "Deletes the Bugtable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBugtable(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bugtable with id: {}", id);
        Bugtable deletedBugtable = bugtableService.delete(id);
        return deletedBugtable != null;
    }

    /**
     * @deprecated Use {@link #findBugtables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Bugtable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bugtable> searchBugtablesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Bugtables list");
        return bugtableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Bugtable instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bugtable> findBugtables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Bugtables list");
        return bugtableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBugtables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return bugtableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Bugtable instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countBugtables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Bugtables");
        return bugtableService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BugtableService instance
	 */
    protected void setBugtableService(BugtableService service) {
        this.bugtableService = service;
    }
}

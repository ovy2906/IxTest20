/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.BuildsBack;
import com.ixtest20.new_ixtest_20.service.BuildsBackService;

/**
 * Controller object for domain model class BuildsBack.
 * @see BuildsBack
 */
@RestController("NEW_IXTEST_20.BuildsBackController")
@Api(value = "BuildsBackController", description = "Exposes APIs to work with BuildsBack resource.")
@RequestMapping("/NEW_IXTEST_20/BuildsBack")
public class BuildsBackController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuildsBackController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.BuildsBackService")
    private BuildsBackService buildsBackService;

    @ApiOperation(value = "Creates a new BuildsBack instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BuildsBack createBuildsBack(@RequestBody BuildsBack buildsBack) {
        LOGGER.debug("Create BuildsBack with information: {}", buildsBack);
        buildsBack = buildsBackService.create(buildsBack);
        LOGGER.debug("Created BuildsBack with information: {}", buildsBack);
        return buildsBack;
    }

    @ApiOperation(value = "Returns the BuildsBack instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BuildsBack getBuildsBack(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting BuildsBack with id: {}", id);
        BuildsBack foundBuildsBack = buildsBackService.getById(id);
        LOGGER.debug("BuildsBack details with id: {}", foundBuildsBack);
        return foundBuildsBack;
    }

    @ApiOperation(value = "Updates the BuildsBack instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BuildsBack editBuildsBack(@PathVariable("id") BigInteger id, @RequestBody BuildsBack buildsBack) throws EntityNotFoundException {
        LOGGER.debug("Editing BuildsBack with id: {}", buildsBack.getBuildid());
        buildsBack.setBuildid(id);
        buildsBack = buildsBackService.update(buildsBack);
        LOGGER.debug("BuildsBack details with id: {}", buildsBack);
        return buildsBack;
    }

    @ApiOperation(value = "Deletes the BuildsBack instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBuildsBack(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BuildsBack with id: {}", id);
        BuildsBack deletedBuildsBack = buildsBackService.delete(id);
        return deletedBuildsBack != null;
    }

    /**
     * @deprecated Use {@link #findBuildsBacks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BuildsBack instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BuildsBack> searchBuildsBacksByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BuildsBacks list");
        return buildsBackService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of BuildsBack instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BuildsBack> findBuildsBacks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BuildsBacks list");
        return buildsBackService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBuildsBacks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return buildsBackService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of BuildsBack instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countBuildsBacks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting BuildsBacks");
        return buildsBackService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BuildsBackService instance
	 */
    protected void setBuildsBackService(BuildsBackService service) {
        this.buildsBackService = service;
    }
}

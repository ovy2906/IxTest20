/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Builds;
import com.ixtest20.new_ixtest_20.Engines;
import com.ixtest20.new_ixtest_20.IopBuildApps;
import com.ixtest20.new_ixtest_20.IopSuite;
import com.ixtest20.new_ixtest_20.Testcaserun;
import com.ixtest20.new_ixtest_20.service.BuildsService;

/**
 * Controller object for domain model class Builds.
 * @see Builds
 */
@RestController("NEW_IXTEST_20.BuildsController")
@Api(value = "BuildsController", description = "Exposes APIs to work with Builds resource.")
@RequestMapping("/NEW_IXTEST_20/Builds")
public class BuildsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuildsController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.BuildsService")
    private BuildsService buildsService;

    @ApiOperation(value = "Creates a new Builds instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Builds createBuilds(@RequestBody Builds builds) {
        LOGGER.debug("Create Builds with information: {}", builds);
        builds = buildsService.create(builds);
        LOGGER.debug("Created Builds with information: {}", builds);
        return builds;
    }

    @ApiOperation(value = "Returns the Builds instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Builds getBuilds(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Builds with id: {}", id);
        Builds foundBuilds = buildsService.getById(id);
        LOGGER.debug("Builds details with id: {}", foundBuilds);
        return foundBuilds;
    }

    @ApiOperation(value = "Updates the Builds instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Builds editBuilds(@PathVariable("id") BigInteger id, @RequestBody Builds builds) throws EntityNotFoundException {
        LOGGER.debug("Editing Builds with id: {}", builds.getBuildid());
        builds.setBuildid(id);
        builds = buildsService.update(builds);
        LOGGER.debug("Builds details with id: {}", builds);
        return builds;
    }

    @ApiOperation(value = "Deletes the Builds instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBuilds(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Builds with id: {}", id);
        Builds deletedBuilds = buildsService.delete(id);
        return deletedBuilds != null;
    }

    /**
     * @deprecated Use {@link #findBuilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Builds instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Builds> searchBuildsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Builds list");
        return buildsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Builds instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Builds> findBuilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Builds list");
        return buildsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBuilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return buildsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Builds instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countBuilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Builds");
        return buildsService.count(query);
    }

    @RequestMapping(value = "/{id}/engineses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the engineses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engines> findAssociatedEngineses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineses");
        return buildsService.findAssociatedEngineses(id, pageable);
    }

    @RequestMapping(value = "/{id}/iopBuildAppses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the iopBuildAppses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IopBuildApps> findAssociatedIopBuildAppses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated iopBuildAppses");
        return buildsService.findAssociatedIopBuildAppses(id, pageable);
    }

    @RequestMapping(value = "/{id}/iopSuites", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the iopSuites instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IopSuite> findAssociatedIopSuites(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated iopSuites");
        return buildsService.findAssociatedIopSuites(id, pageable);
    }

    @RequestMapping(value = "/{id:.+}/testcaseruns", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the testcaseruns instance associated with the given id.")
    public Page<Testcaserun> findAssociatedTestcaseruns(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated testcaseruns");
        return buildsService.findAssociatedTestcaseruns(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BuildsService instance
	 */
    protected void setBuildsService(BuildsService service) {
        this.buildsService = service;
    }
}

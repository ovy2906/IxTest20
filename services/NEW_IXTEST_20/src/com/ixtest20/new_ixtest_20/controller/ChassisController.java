/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Chassis;
import com.ixtest20.new_ixtest_20.Network;
import com.ixtest20.new_ixtest_20.service.ChassisService;

/**
 * Controller object for domain model class Chassis.
 * @see Chassis
 */
@RestController("NEW_IXTEST_20.ChassisController")
@Api(value = "ChassisController", description = "Exposes APIs to work with Chassis resource.")
@RequestMapping("/NEW_IXTEST_20/Chassis")
public class ChassisController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChassisController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.ChassisService")
    private ChassisService chassisService;

    @ApiOperation(value = "Creates a new Chassis instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chassis createChassis(@RequestBody Chassis chassis) {
        LOGGER.debug("Create Chassis with information: {}", chassis);
        chassis = chassisService.create(chassis);
        LOGGER.debug("Created Chassis with information: {}", chassis);
        return chassis;
    }

    @ApiOperation(value = "Returns the Chassis instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chassis getChassis(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Chassis with id: {}", id);
        Chassis foundChassis = chassisService.getById(id);
        LOGGER.debug("Chassis details with id: {}", foundChassis);
        return foundChassis;
    }

    @ApiOperation(value = "Updates the Chassis instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Chassis editChassis(@PathVariable("id") BigInteger id, @RequestBody Chassis chassis) throws EntityNotFoundException {
        LOGGER.debug("Editing Chassis with id: {}", chassis.getChassisid());
        chassis.setChassisid(id);
        chassis = chassisService.update(chassis);
        LOGGER.debug("Chassis details with id: {}", chassis);
        return chassis;
    }

    @ApiOperation(value = "Deletes the Chassis instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteChassis(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Chassis with id: {}", id);
        Chassis deletedChassis = chassisService.delete(id);
        return deletedChassis != null;
    }

    /**
     * @deprecated Use {@link #findChasses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Chassis instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Chassis> searchChassesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Chasses list");
        return chassisService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Chassis instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Chassis> findChasses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Chasses list");
        return chassisService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportChasses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return chassisService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Chassis instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countChasses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Chasses");
        return chassisService.count(query);
    }

    @RequestMapping(value = "/{id}/networks", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the networks instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Network> findAssociatedNetworks(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated networks");
        return chassisService.findAssociatedNetworks(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ChassisService instance
	 */
    protected void setChassisService(ChassisService service) {
        this.chassisService = service;
    }
}

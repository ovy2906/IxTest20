/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.DeletedBuild;
import com.ixtest20.new_ixtest_20.service.DeletedBuildService;

/**
 * Controller object for domain model class DeletedBuild.
 * @see DeletedBuild
 */
@RestController("NEW_IXTEST_20.DeletedBuildController")
@Api(value = "DeletedBuildController", description = "Exposes APIs to work with DeletedBuild resource.")
@RequestMapping("/NEW_IXTEST_20/DeletedBuild")
public class DeletedBuildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeletedBuildController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.DeletedBuildService")
    private DeletedBuildService deletedBuildService;

    @ApiOperation(value = "Creates a new DeletedBuild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletedBuild createDeletedBuild(@RequestBody DeletedBuild deletedBuild) {
        LOGGER.debug("Create DeletedBuild with information: {}", deletedBuild);
        deletedBuild = deletedBuildService.create(deletedBuild);
        LOGGER.debug("Created DeletedBuild with information: {}", deletedBuild);
        return deletedBuild;
    }

    @ApiOperation(value = "Returns the DeletedBuild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletedBuild getDeletedBuild(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting DeletedBuild with id: {}", id);
        DeletedBuild foundDeletedBuild = deletedBuildService.getById(id);
        LOGGER.debug("DeletedBuild details with id: {}", foundDeletedBuild);
        return foundDeletedBuild;
    }

    @ApiOperation(value = "Updates the DeletedBuild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletedBuild editDeletedBuild(@PathVariable("id") BigDecimal id, @RequestBody DeletedBuild deletedBuild) throws EntityNotFoundException {
        LOGGER.debug("Editing DeletedBuild with id: {}", deletedBuild.getIdDeletedBuild());
        deletedBuild.setIdDeletedBuild(id);
        deletedBuild = deletedBuildService.update(deletedBuild);
        LOGGER.debug("DeletedBuild details with id: {}", deletedBuild);
        return deletedBuild;
    }

    @ApiOperation(value = "Deletes the DeletedBuild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDeletedBuild(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeletedBuild with id: {}", id);
        DeletedBuild deletedDeletedBuild = deletedBuildService.delete(id);
        return deletedDeletedBuild != null;
    }

    /**
     * @deprecated Use {@link #findDeletedBuilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DeletedBuild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DeletedBuild> searchDeletedBuildsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DeletedBuilds list");
        return deletedBuildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of DeletedBuild instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DeletedBuild> findDeletedBuilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DeletedBuilds list");
        return deletedBuildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDeletedBuilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return deletedBuildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of DeletedBuild instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countDeletedBuilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting DeletedBuilds");
        return deletedBuildService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DeletedBuildService instance
	 */
    protected void setDeletedBuildService(DeletedBuildService service) {
        this.deletedBuildService = service;
    }
}

/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.DeletedEngine;
import com.ixtest20.new_ixtest_20.service.DeletedEngineService;

/**
 * Controller object for domain model class DeletedEngine.
 * @see DeletedEngine
 */
@RestController("NEW_IXTEST_20.DeletedEngineController")
@Api(value = "DeletedEngineController", description = "Exposes APIs to work with DeletedEngine resource.")
@RequestMapping("/NEW_IXTEST_20/DeletedEngine")
public class DeletedEngineController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeletedEngineController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.DeletedEngineService")
    private DeletedEngineService deletedEngineService;

    @ApiOperation(value = "Creates a new DeletedEngine instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletedEngine createDeletedEngine(@RequestBody DeletedEngine deletedEngine) {
        LOGGER.debug("Create DeletedEngine with information: {}", deletedEngine);
        deletedEngine = deletedEngineService.create(deletedEngine);
        LOGGER.debug("Created DeletedEngine with information: {}", deletedEngine);
        return deletedEngine;
    }

    @ApiOperation(value = "Returns the DeletedEngine instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletedEngine getDeletedEngine(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting DeletedEngine with id: {}", id);
        DeletedEngine foundDeletedEngine = deletedEngineService.getById(id);
        LOGGER.debug("DeletedEngine details with id: {}", foundDeletedEngine);
        return foundDeletedEngine;
    }

    @ApiOperation(value = "Updates the DeletedEngine instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletedEngine editDeletedEngine(@PathVariable("id") BigDecimal id, @RequestBody DeletedEngine deletedEngine) throws EntityNotFoundException {
        LOGGER.debug("Editing DeletedEngine with id: {}", deletedEngine.getIdDeletedEngine());
        deletedEngine.setIdDeletedEngine(id);
        deletedEngine = deletedEngineService.update(deletedEngine);
        LOGGER.debug("DeletedEngine details with id: {}", deletedEngine);
        return deletedEngine;
    }

    @ApiOperation(value = "Deletes the DeletedEngine instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    public boolean deleteDeletedEngine(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeletedEngine with id: {}", id);
        DeletedEngine deletedDeletedEngine = deletedEngineService.delete(id);
        return deletedDeletedEngine != null;
    }

    /**
     * @deprecated Use {@link #findDeletedEngines(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DeletedEngine instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DeletedEngine> searchDeletedEnginesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DeletedEngines list");
        return deletedEngineService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of DeletedEngine instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DeletedEngine> findDeletedEngines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DeletedEngines list");
        return deletedEngineService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDeletedEngines(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return deletedEngineService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of DeletedEngine instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countDeletedEngines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting DeletedEngines");
        return deletedEngineService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DeletedEngineService instance
	 */
    protected void setDeletedEngineService(DeletedEngineService service) {
        this.deletedEngineService = service;
    }
}

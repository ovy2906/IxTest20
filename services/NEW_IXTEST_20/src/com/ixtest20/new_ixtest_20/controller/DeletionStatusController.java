/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.DeletionStatus;
import com.ixtest20.new_ixtest_20.service.DeletionStatusService;

/**
 * Controller object for domain model class DeletionStatus.
 * @see DeletionStatus
 */
@RestController("NEW_IXTEST_20.DeletionStatusController")
@Api(value = "DeletionStatusController", description = "Exposes APIs to work with DeletionStatus resource.")
@RequestMapping("/NEW_IXTEST_20/DeletionStatus")
public class DeletionStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeletionStatusController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.DeletionStatusService")
    private DeletionStatusService deletionStatusService;

    @ApiOperation(value = "Creates a new DeletionStatus instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletionStatus createDeletionStatus(@RequestBody DeletionStatus deletionStatus) {
        LOGGER.debug("Create DeletionStatus with information: {}", deletionStatus);
        deletionStatus = deletionStatusService.create(deletionStatus);
        LOGGER.debug("Created DeletionStatus with information: {}", deletionStatus);
        return deletionStatus;
    }

    @ApiOperation(value = "Returns the DeletionStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletionStatus getDeletionStatus(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting DeletionStatus with id: {}", id);
        DeletionStatus foundDeletionStatus = deletionStatusService.getById(id);
        LOGGER.debug("DeletionStatus details with id: {}", foundDeletionStatus);
        return foundDeletionStatus;
    }

    @ApiOperation(value = "Updates the DeletionStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DeletionStatus editDeletionStatus(@PathVariable("id") BigDecimal id, @RequestBody DeletionStatus deletionStatus) throws EntityNotFoundException {
        LOGGER.debug("Editing DeletionStatus with id: {}", deletionStatus.getStatusId());
        deletionStatus.setStatusId(id);
        deletionStatus = deletionStatusService.update(deletionStatus);
        LOGGER.debug("DeletionStatus details with id: {}", deletionStatus);
        return deletionStatus;
    }

    @ApiOperation(value = "Deletes the DeletionStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDeletionStatus(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeletionStatus with id: {}", id);
        DeletionStatus deletedDeletionStatus = deletionStatusService.delete(id);
        return deletedDeletionStatus != null;
    }

    /**
     * @deprecated Use {@link #findDeletionStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DeletionStatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DeletionStatus> searchDeletionStatusesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DeletionStatuses list");
        return deletionStatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of DeletionStatus instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DeletionStatus> findDeletionStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DeletionStatuses list");
        return deletionStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDeletionStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return deletionStatusService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of DeletionStatus instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countDeletionStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting DeletionStatuses");
        return deletionStatusService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DeletionStatusService instance
	 */
    protected void setDeletionStatusService(DeletionStatusService service) {
        this.deletionStatusService = service;
    }
}

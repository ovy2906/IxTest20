/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.DjangoSite;
import com.ixtest20.new_ixtest_20.service.DjangoSiteService;

/**
 * Controller object for domain model class DjangoSite.
 * @see DjangoSite
 */
@RestController("NEW_IXTEST_20.DjangoSiteController")
@Api(value = "DjangoSiteController", description = "Exposes APIs to work with DjangoSite resource.")
@RequestMapping("/NEW_IXTEST_20/DjangoSite")
public class DjangoSiteController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DjangoSiteController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.DjangoSiteService")
    private DjangoSiteService djangoSiteService;

    @ApiOperation(value = "Creates a new DjangoSite instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DjangoSite createDjangoSite(@RequestBody DjangoSite djangoSite) {
        LOGGER.debug("Create DjangoSite with information: {}", djangoSite);
        djangoSite = djangoSiteService.create(djangoSite);
        LOGGER.debug("Created DjangoSite with information: {}", djangoSite);
        return djangoSite;
    }

    @ApiOperation(value = "Returns the DjangoSite instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DjangoSite getDjangoSite(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting DjangoSite with id: {}", id);
        DjangoSite foundDjangoSite = djangoSiteService.getById(id);
        LOGGER.debug("DjangoSite details with id: {}", foundDjangoSite);
        return foundDjangoSite;
    }

    @ApiOperation(value = "Updates the DjangoSite instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DjangoSite editDjangoSite(@PathVariable("id") BigInteger id, @RequestBody DjangoSite djangoSite) throws EntityNotFoundException {
        LOGGER.debug("Editing DjangoSite with id: {}", djangoSite.getId());
        djangoSite.setId(id);
        djangoSite = djangoSiteService.update(djangoSite);
        LOGGER.debug("DjangoSite details with id: {}", djangoSite);
        return djangoSite;
    }

    @ApiOperation(value = "Deletes the DjangoSite instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDjangoSite(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DjangoSite with id: {}", id);
        DjangoSite deletedDjangoSite = djangoSiteService.delete(id);
        return deletedDjangoSite != null;
    }

    /**
     * @deprecated Use {@link #findDjangoSites(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DjangoSite instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DjangoSite> searchDjangoSitesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DjangoSites list");
        return djangoSiteService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of DjangoSite instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DjangoSite> findDjangoSites(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DjangoSites list");
        return djangoSiteService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDjangoSites(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return djangoSiteService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of DjangoSite instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countDjangoSites(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting DjangoSites");
        return djangoSiteService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DjangoSiteService instance
	 */
    protected void setDjangoSiteService(DjangoSiteService service) {
        this.djangoSiteService = service;
    }
}

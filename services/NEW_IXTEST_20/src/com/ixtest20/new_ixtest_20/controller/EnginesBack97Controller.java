/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.EnginesBack97;
import com.ixtest20.new_ixtest_20.service.EnginesBack97Service;

/**
 * Controller object for domain model class EnginesBack97.
 * @see EnginesBack97
 */
@RestController("NEW_IXTEST_20.EnginesBack97Controller")
@Api(value = "EnginesBack97Controller", description = "Exposes APIs to work with EnginesBack97 resource.")
@RequestMapping("/NEW_IXTEST_20/EnginesBack97")
public class EnginesBack97Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(EnginesBack97Controller.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.EnginesBack97Service")
    private EnginesBack97Service enginesBack97Service;

    @ApiOperation(value = "Creates a new EnginesBack97 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EnginesBack97 createEnginesBack97(@RequestBody EnginesBack97 enginesBack97) {
        LOGGER.debug("Create EnginesBack97 with information: {}", enginesBack97);
        enginesBack97 = enginesBack97Service.create(enginesBack97);
        LOGGER.debug("Created EnginesBack97 with information: {}", enginesBack97);
        return enginesBack97;
    }

    @ApiOperation(value = "Returns the EnginesBack97 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EnginesBack97 getEnginesBack97(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting EnginesBack97 with id: {}", id);
        EnginesBack97 foundEnginesBack97 = enginesBack97Service.getById(id);
        LOGGER.debug("EnginesBack97 details with id: {}", foundEnginesBack97);
        return foundEnginesBack97;
    }

    @ApiOperation(value = "Updates the EnginesBack97 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EnginesBack97 editEnginesBack97(@PathVariable("id") BigInteger id, @RequestBody EnginesBack97 enginesBack97) throws EntityNotFoundException {
        LOGGER.debug("Editing EnginesBack97 with id: {}", enginesBack97.getEngineid());
        enginesBack97.setEngineid(id);
        enginesBack97 = enginesBack97Service.update(enginesBack97);
        LOGGER.debug("EnginesBack97 details with id: {}", enginesBack97);
        return enginesBack97;
    }

    @ApiOperation(value = "Deletes the EnginesBack97 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEnginesBack97(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EnginesBack97 with id: {}", id);
        EnginesBack97 deletedEnginesBack97 = enginesBack97Service.delete(id);
        return deletedEnginesBack97 != null;
    }

    /**
     * @deprecated Use {@link #findEnginesBack97s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EnginesBack97 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EnginesBack97> searchEnginesBack97sByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EnginesBack97s list");
        return enginesBack97Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of EnginesBack97 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EnginesBack97> findEnginesBack97s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EnginesBack97s list");
        return enginesBack97Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEnginesBack97s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return enginesBack97Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of EnginesBack97 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countEnginesBack97s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting EnginesBack97s");
        return enginesBack97Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EnginesBack97Service instance
	 */
    protected void setEnginesBack97Service(EnginesBack97Service service) {
        this.enginesBack97Service = service;
    }
}

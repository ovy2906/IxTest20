/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Engines;
import com.ixtest20.new_ixtest_20.service.EnginesService;

/**
 * Controller object for domain model class Engines.
 * @see Engines
 */
@RestController("NEW_IXTEST_20.EnginesController")
@Api(value = "EnginesController", description = "Exposes APIs to work with Engines resource.")
@RequestMapping("/NEW_IXTEST_20/Engines")
public class EnginesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EnginesController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.EnginesService")
    private EnginesService enginesService;

    @ApiOperation(value = "Creates a new Engines instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Engines createEngines(@RequestBody Engines engines) {
        LOGGER.debug("Create Engines with information: {}", engines);
        engines = enginesService.create(engines);
        LOGGER.debug("Created Engines with information: {}", engines);
        return engines;
    }

    @ApiOperation(value = "Returns the Engines instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Engines getEngines(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Engines with id: {}", id);
        Engines foundEngines = enginesService.getById(id);
        LOGGER.debug("Engines details with id: {}", foundEngines);
        return foundEngines;
    }

    @ApiOperation(value = "Updates the Engines instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Engines editEngines(@PathVariable("id") BigInteger id, @RequestBody Engines engines) throws EntityNotFoundException {
        LOGGER.debug("Editing Engines with id: {}", engines.getEngineid());
        engines.setEngineid(id);
        engines = enginesService.update(engines);
        LOGGER.debug("Engines details with id: {}", engines);
        return engines;
    }

    @ApiOperation(value = "Deletes the Engines instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEngines(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Engines with id: {}", id);
        Engines deletedEngines = enginesService.delete(id);
        return deletedEngines != null;
    }

    /**
     * @deprecated Use {@link #findEngines(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Engines instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engines> searchEnginesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Engines list");
        return enginesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Engines instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engines> findEngines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Engines list");
        return enginesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEngines(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return enginesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Engines instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countEngines(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Engines");
        return enginesService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EnginesService instance
	 */
    protected void setEnginesService(EnginesService service) {
        this.enginesService = service;
    }
}

/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Engines;
import com.ixtest20.new_ixtest_20.IopSuite;
import com.ixtest20.new_ixtest_20.service.IopSuiteService;

/**
 * Controller object for domain model class IopSuite.
 * @see IopSuite
 */
@RestController("NEW_IXTEST_20.IopSuiteController")
@Api(value = "IopSuiteController", description = "Exposes APIs to work with IopSuite resource.")
@RequestMapping("/NEW_IXTEST_20/IopSuite")
public class IopSuiteController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IopSuiteController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.IopSuiteService")
    private IopSuiteService iopSuiteService;

    @ApiOperation(value = "Creates a new IopSuite instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IopSuite createIopSuite(@RequestBody IopSuite iopSuite) {
        LOGGER.debug("Create IopSuite with information: {}", iopSuite);
        iopSuite = iopSuiteService.create(iopSuite);
        LOGGER.debug("Created IopSuite with information: {}", iopSuite);
        return iopSuite;
    }

    @ApiOperation(value = "Returns the IopSuite instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IopSuite getIopSuite(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting IopSuite with id: {}", id);
        IopSuite foundIopSuite = iopSuiteService.getById(id);
        LOGGER.debug("IopSuite details with id: {}", foundIopSuite);
        return foundIopSuite;
    }

    @ApiOperation(value = "Updates the IopSuite instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IopSuite editIopSuite(@PathVariable("id") BigInteger id, @RequestBody IopSuite iopSuite) throws EntityNotFoundException {
        LOGGER.debug("Editing IopSuite with id: {}", iopSuite.getIopSuiteId());
        iopSuite.setIopSuiteId(id);
        iopSuite = iopSuiteService.update(iopSuite);
        LOGGER.debug("IopSuite details with id: {}", iopSuite);
        return iopSuite;
    }

    @ApiOperation(value = "Deletes the IopSuite instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteIopSuite(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IopSuite with id: {}", id);
        IopSuite deletedIopSuite = iopSuiteService.delete(id);
        return deletedIopSuite != null;
    }

    /**
     * @deprecated Use {@link #findIopSuites(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of IopSuite instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IopSuite> searchIopSuitesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering IopSuites list");
        return iopSuiteService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of IopSuite instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IopSuite> findIopSuites(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering IopSuites list");
        return iopSuiteService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportIopSuites(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return iopSuiteService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of IopSuite instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countIopSuites(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting IopSuites");
        return iopSuiteService.count(query);
    }

    @RequestMapping(value = "/{id}/engineses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the engineses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engines> findAssociatedEngineses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineses");
        return iopSuiteService.findAssociatedEngineses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IopSuiteService instance
	 */
    protected void setIopSuiteService(IopSuiteService service) {
        this.iopSuiteService = service;
    }
}

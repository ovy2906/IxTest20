/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Loadmodules;
import com.ixtest20.new_ixtest_20.service.LoadmodulesService;

/**
 * Controller object for domain model class Loadmodules.
 * @see Loadmodules
 */
@RestController("NEW_IXTEST_20.LoadmodulesController")
@Api(value = "LoadmodulesController", description = "Exposes APIs to work with Loadmodules resource.")
@RequestMapping("/NEW_IXTEST_20/Loadmodules")
public class LoadmodulesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoadmodulesController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.LoadmodulesService")
    private LoadmodulesService loadmodulesService;

    @ApiOperation(value = "Creates a new Loadmodules instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Loadmodules createLoadmodules(@RequestBody Loadmodules loadmodules) {
        LOGGER.debug("Create Loadmodules with information: {}", loadmodules);
        loadmodules = loadmodulesService.create(loadmodules);
        LOGGER.debug("Created Loadmodules with information: {}", loadmodules);
        return loadmodules;
    }

    @ApiOperation(value = "Returns the Loadmodules instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Loadmodules getLoadmodules(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Loadmodules with id: {}", id);
        Loadmodules foundLoadmodules = loadmodulesService.getById(id);
        LOGGER.debug("Loadmodules details with id: {}", foundLoadmodules);
        return foundLoadmodules;
    }

    @ApiOperation(value = "Updates the Loadmodules instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Loadmodules editLoadmodules(@PathVariable("id") BigInteger id, @RequestBody Loadmodules loadmodules) throws EntityNotFoundException {
        LOGGER.debug("Editing Loadmodules with id: {}", loadmodules.getLmid());
        loadmodules.setLmid(id);
        loadmodules = loadmodulesService.update(loadmodules);
        LOGGER.debug("Loadmodules details with id: {}", loadmodules);
        return loadmodules;
    }

    @ApiOperation(value = "Deletes the Loadmodules instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLoadmodules(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Loadmodules with id: {}", id);
        Loadmodules deletedLoadmodules = loadmodulesService.delete(id);
        return deletedLoadmodules != null;
    }

    /**
     * @deprecated Use {@link #findLoadmodules(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Loadmodules instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Loadmodules> searchLoadmodulesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Loadmodules list");
        return loadmodulesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Loadmodules instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Loadmodules> findLoadmodules(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Loadmodules list");
        return loadmodulesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLoadmodules(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return loadmodulesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Loadmodules instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countLoadmodules(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Loadmodules");
        return loadmodulesService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LoadmodulesService instance
	 */
    protected void setLoadmodulesService(LoadmodulesService service) {
        this.loadmodulesService = service;
    }
}

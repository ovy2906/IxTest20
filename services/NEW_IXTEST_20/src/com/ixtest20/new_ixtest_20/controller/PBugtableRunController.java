/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.PBugtableRun;
import com.ixtest20.new_ixtest_20.service.PBugtableRunService;

/**
 * Controller object for domain model class PBugtableRun.
 * @see PBugtableRun
 */
@RestController("NEW_IXTEST_20.PBugtableRunController")
@Api(value = "PBugtableRunController", description = "Exposes APIs to work with PBugtableRun resource.")
@RequestMapping("/NEW_IXTEST_20/PBugtableRun")
public class PBugtableRunController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PBugtableRunController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.PBugtableRunService")
    private PBugtableRunService pBugtableRunService;

    @ApiOperation(value = "Creates a new PBugtableRun instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PBugtableRun createPBugtableRun(@RequestBody PBugtableRun pbugtableRun) {
        LOGGER.debug("Create PBugtableRun with information: {}", pbugtableRun);
        pbugtableRun = pBugtableRunService.create(pbugtableRun);
        LOGGER.debug("Created PBugtableRun with information: {}", pbugtableRun);
        return pbugtableRun;
    }

    @ApiOperation(value = "Returns the PBugtableRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PBugtableRun getPBugtableRun(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting PBugtableRun with id: {}", id);
        PBugtableRun foundPBugtableRun = pBugtableRunService.getById(id);
        LOGGER.debug("PBugtableRun details with id: {}", foundPBugtableRun);
        return foundPBugtableRun;
    }

    @ApiOperation(value = "Updates the PBugtableRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PBugtableRun editPBugtableRun(@PathVariable("id") BigInteger id, @RequestBody PBugtableRun pbugtableRun) throws EntityNotFoundException {
        LOGGER.debug("Editing PBugtableRun with id: {}", pbugtableRun.getId());
        pbugtableRun.setId(id);
        pbugtableRun = pBugtableRunService.update(pbugtableRun);
        LOGGER.debug("PBugtableRun details with id: {}", pbugtableRun);
        return pbugtableRun;
    }

    @ApiOperation(value = "Deletes the PBugtableRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePBugtableRun(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PBugtableRun with id: {}", id);
        PBugtableRun deletedPBugtableRun = pBugtableRunService.delete(id);
        return deletedPBugtableRun != null;
    }

    /**
     * @deprecated Use {@link #findPBugtableRuns(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PBugtableRun instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PBugtableRun> searchPBugtableRunsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PBugtableRuns list");
        return pBugtableRunService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of PBugtableRun instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PBugtableRun> findPBugtableRuns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PBugtableRuns list");
        return pBugtableRunService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPBugtableRuns(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return pBugtableRunService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of PBugtableRun instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countPBugtableRuns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PBugtableRuns");
        return pBugtableRunService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PBugtableRunService instance
	 */
    protected void setPBugtableRunService(PBugtableRunService service) {
        this.pBugtableRunService = service;
    }
}

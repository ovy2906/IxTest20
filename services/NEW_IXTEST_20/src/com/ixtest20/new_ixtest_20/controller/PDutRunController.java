/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.PDutRun;
import com.ixtest20.new_ixtest_20.service.PDutRunService;

/**
 * Controller object for domain model class PDutRun.
 * @see PDutRun
 */
@RestController("NEW_IXTEST_20.PDutRunController")
@Api(value = "PDutRunController", description = "Exposes APIs to work with PDutRun resource.")
@RequestMapping("/NEW_IXTEST_20/PDutRun")
public class PDutRunController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PDutRunController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.PDutRunService")
    private PDutRunService pDutRunService;

    @ApiOperation(value = "Creates a new PDutRun instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PDutRun createPDutRun(@RequestBody PDutRun pdutRun) {
        LOGGER.debug("Create PDutRun with information: {}", pdutRun);
        pdutRun = pDutRunService.create(pdutRun);
        LOGGER.debug("Created PDutRun with information: {}", pdutRun);
        return pdutRun;
    }

    @ApiOperation(value = "Returns the PDutRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PDutRun getPDutRun(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting PDutRun with id: {}", id);
        PDutRun foundPDutRun = pDutRunService.getById(id);
        LOGGER.debug("PDutRun details with id: {}", foundPDutRun);
        return foundPDutRun;
    }

    @ApiOperation(value = "Updates the PDutRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PDutRun editPDutRun(@PathVariable("id") BigInteger id, @RequestBody PDutRun pdutRun) throws EntityNotFoundException {
        LOGGER.debug("Editing PDutRun with id: {}", pdutRun.getId());
        pdutRun.setId(id);
        pdutRun = pDutRunService.update(pdutRun);
        LOGGER.debug("PDutRun details with id: {}", pdutRun);
        return pdutRun;
    }

    @ApiOperation(value = "Deletes the PDutRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePDutRun(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PDutRun with id: {}", id);
        PDutRun deletedPDutRun = pDutRunService.delete(id);
        return deletedPDutRun != null;
    }

    /**
     * @deprecated Use {@link #findPDutRuns(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PDutRun instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PDutRun> searchPDutRunsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PDutRuns list");
        return pDutRunService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of PDutRun instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PDutRun> findPDutRuns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PDutRuns list");
        return pDutRunService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPDutRuns(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return pDutRunService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of PDutRun instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countPDutRuns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PDutRuns");
        return pDutRunService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PDutRunService instance
	 */
    protected void setPDutRunService(PDutRunService service) {
        this.pDutRunService = service;
    }
}

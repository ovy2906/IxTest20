/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.PDutRunTesting;
import com.ixtest20.new_ixtest_20.service.PDutRunTestingService;

/**
 * Controller object for domain model class PDutRunTesting.
 * @see PDutRunTesting
 */
@RestController("NEW_IXTEST_20.PDutRunTestingController")
@Api(value = "PDutRunTestingController", description = "Exposes APIs to work with PDutRunTesting resource.")
@RequestMapping("/NEW_IXTEST_20/PDutRunTesting")
public class PDutRunTestingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PDutRunTestingController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.PDutRunTestingService")
    private PDutRunTestingService pDutRunTestingService;

    @ApiOperation(value = "Creates a new PDutRunTesting instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PDutRunTesting createPDutRunTesting(@RequestBody PDutRunTesting pdutRunTesting) {
        LOGGER.debug("Create PDutRunTesting with information: {}", pdutRunTesting);
        pdutRunTesting = pDutRunTestingService.create(pdutRunTesting);
        LOGGER.debug("Created PDutRunTesting with information: {}", pdutRunTesting);
        return pdutRunTesting;
    }

    @ApiOperation(value = "Returns the PDutRunTesting instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PDutRunTesting getPDutRunTesting(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting PDutRunTesting with id: {}", id);
        PDutRunTesting foundPDutRunTesting = pDutRunTestingService.getById(id);
        LOGGER.debug("PDutRunTesting details with id: {}", foundPDutRunTesting);
        return foundPDutRunTesting;
    }

    @ApiOperation(value = "Updates the PDutRunTesting instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PDutRunTesting editPDutRunTesting(@PathVariable("id") BigInteger id, @RequestBody PDutRunTesting pdutRunTesting) throws EntityNotFoundException {
        LOGGER.debug("Editing PDutRunTesting with id: {}", pdutRunTesting.getId());
        pdutRunTesting.setId(id);
        pdutRunTesting = pDutRunTestingService.update(pdutRunTesting);
        LOGGER.debug("PDutRunTesting details with id: {}", pdutRunTesting);
        return pdutRunTesting;
    }

    @ApiOperation(value = "Deletes the PDutRunTesting instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePDutRunTesting(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PDutRunTesting with id: {}", id);
        PDutRunTesting deletedPDutRunTesting = pDutRunTestingService.delete(id);
        return deletedPDutRunTesting != null;
    }

    /**
     * @deprecated Use {@link #findPDutRunTestings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PDutRunTesting instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PDutRunTesting> searchPDutRunTestingsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PDutRunTestings list");
        return pDutRunTestingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of PDutRunTesting instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PDutRunTesting> findPDutRunTestings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PDutRunTestings list");
        return pDutRunTestingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPDutRunTestings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return pDutRunTestingService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of PDutRunTesting instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countPDutRunTestings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PDutRunTestings");
        return pDutRunTestingService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PDutRunTestingService instance
	 */
    protected void setPDutRunTestingService(PDutRunTestingService service) {
        this.pDutRunTestingService = service;
    }
}

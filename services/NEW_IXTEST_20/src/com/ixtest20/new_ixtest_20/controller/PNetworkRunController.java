/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.PNetworkRun;
import com.ixtest20.new_ixtest_20.service.PNetworkRunService;

/**
 * Controller object for domain model class PNetworkRun.
 * @see PNetworkRun
 */
@RestController("NEW_IXTEST_20.PNetworkRunController")
@Api(value = "PNetworkRunController", description = "Exposes APIs to work with PNetworkRun resource.")
@RequestMapping("/NEW_IXTEST_20/PNetworkRun")
public class PNetworkRunController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PNetworkRunController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.PNetworkRunService")
    private PNetworkRunService pNetworkRunService;

    @ApiOperation(value = "Creates a new PNetworkRun instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PNetworkRun createPNetworkRun(@RequestBody PNetworkRun pnetworkRun) {
        LOGGER.debug("Create PNetworkRun with information: {}", pnetworkRun);
        pnetworkRun = pNetworkRunService.create(pnetworkRun);
        LOGGER.debug("Created PNetworkRun with information: {}", pnetworkRun);
        return pnetworkRun;
    }

    @ApiOperation(value = "Returns the PNetworkRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PNetworkRun getPNetworkRun(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting PNetworkRun with id: {}", id);
        PNetworkRun foundPNetworkRun = pNetworkRunService.getById(id);
        LOGGER.debug("PNetworkRun details with id: {}", foundPNetworkRun);
        return foundPNetworkRun;
    }

    @ApiOperation(value = "Updates the PNetworkRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PNetworkRun editPNetworkRun(@PathVariable("id") BigInteger id, @RequestBody PNetworkRun pnetworkRun) throws EntityNotFoundException {
        LOGGER.debug("Editing PNetworkRun with id: {}", pnetworkRun.getId());
        pnetworkRun.setId(id);
        pnetworkRun = pNetworkRunService.update(pnetworkRun);
        LOGGER.debug("PNetworkRun details with id: {}", pnetworkRun);
        return pnetworkRun;
    }

    @ApiOperation(value = "Deletes the PNetworkRun instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePNetworkRun(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PNetworkRun with id: {}", id);
        PNetworkRun deletedPNetworkRun = pNetworkRunService.delete(id);
        return deletedPNetworkRun != null;
    }

    /**
     * @deprecated Use {@link #findPNetworkRuns(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PNetworkRun instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PNetworkRun> searchPNetworkRunsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PNetworkRuns list");
        return pNetworkRunService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of PNetworkRun instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PNetworkRun> findPNetworkRuns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PNetworkRuns list");
        return pNetworkRunService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPNetworkRuns(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return pNetworkRunService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of PNetworkRun instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countPNetworkRuns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PNetworkRuns");
        return pNetworkRunService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PNetworkRunService instance
	 */
    protected void setPNetworkRunService(PNetworkRunService service) {
        this.pNetworkRunService = service;
    }
}

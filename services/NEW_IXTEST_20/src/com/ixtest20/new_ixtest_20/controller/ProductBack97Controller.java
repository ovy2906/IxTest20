/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.ProductBack97;
import com.ixtest20.new_ixtest_20.service.ProductBack97Service;

/**
 * Controller object for domain model class ProductBack97.
 * @see ProductBack97
 */
@RestController("NEW_IXTEST_20.ProductBack97Controller")
@Api(value = "ProductBack97Controller", description = "Exposes APIs to work with ProductBack97 resource.")
@RequestMapping("/NEW_IXTEST_20/ProductBack97")
public class ProductBack97Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductBack97Controller.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.ProductBack97Service")
    private ProductBack97Service productBack97Service;

    @ApiOperation(value = "Creates a new ProductBack97 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductBack97 createProductBack97(@RequestBody ProductBack97 productBack97) {
        LOGGER.debug("Create ProductBack97 with information: {}", productBack97);
        productBack97 = productBack97Service.create(productBack97);
        LOGGER.debug("Created ProductBack97 with information: {}", productBack97);
        return productBack97;
    }

    @ApiOperation(value = "Returns the ProductBack97 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductBack97 getProductBack97(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting ProductBack97 with id: {}", id);
        ProductBack97 foundProductBack97 = productBack97Service.getById(id);
        LOGGER.debug("ProductBack97 details with id: {}", foundProductBack97);
        return foundProductBack97;
    }

    @ApiOperation(value = "Updates the ProductBack97 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductBack97 editProductBack97(@PathVariable("id") BigInteger id, @RequestBody ProductBack97 productBack97) throws EntityNotFoundException {
        LOGGER.debug("Editing ProductBack97 with id: {}", productBack97.getProductid());
        productBack97.setProductid(id);
        productBack97 = productBack97Service.update(productBack97);
        LOGGER.debug("ProductBack97 details with id: {}", productBack97);
        return productBack97;
    }

    @ApiOperation(value = "Deletes the ProductBack97 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProductBack97(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProductBack97 with id: {}", id);
        ProductBack97 deletedProductBack97 = productBack97Service.delete(id);
        return deletedProductBack97 != null;
    }

    /**
     * @deprecated Use {@link #findProductBack97s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ProductBack97 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductBack97> searchProductBack97sByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ProductBack97s list");
        return productBack97Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of ProductBack97 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductBack97> findProductBack97s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProductBack97s list");
        return productBack97Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProductBack97s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return productBack97Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of ProductBack97 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countProductBack97s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ProductBack97s");
        return productBack97Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductBack97Service instance
	 */
    protected void setProductBack97Service(ProductBack97Service service) {
        this.productBack97Service = service;
    }
}

/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.ProductsBack;
import com.ixtest20.new_ixtest_20.service.ProductsBackService;

/**
 * Controller object for domain model class ProductsBack.
 * @see ProductsBack
 */
@RestController("NEW_IXTEST_20.ProductsBackController")
@Api(value = "ProductsBackController", description = "Exposes APIs to work with ProductsBack resource.")
@RequestMapping("/NEW_IXTEST_20/ProductsBack")
public class ProductsBackController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsBackController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.ProductsBackService")
    private ProductsBackService productsBackService;

    @ApiOperation(value = "Creates a new ProductsBack instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductsBack createProductsBack(@RequestBody ProductsBack productsBack) {
        LOGGER.debug("Create ProductsBack with information: {}", productsBack);
        productsBack = productsBackService.create(productsBack);
        LOGGER.debug("Created ProductsBack with information: {}", productsBack);
        return productsBack;
    }

    @ApiOperation(value = "Returns the ProductsBack instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductsBack getProductsBack(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting ProductsBack with id: {}", id);
        ProductsBack foundProductsBack = productsBackService.getById(id);
        LOGGER.debug("ProductsBack details with id: {}", foundProductsBack);
        return foundProductsBack;
    }

    @ApiOperation(value = "Updates the ProductsBack instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProductsBack editProductsBack(@PathVariable("id") BigInteger id, @RequestBody ProductsBack productsBack) throws EntityNotFoundException {
        LOGGER.debug("Editing ProductsBack with id: {}", productsBack.getProductid());
        productsBack.setProductid(id);
        productsBack = productsBackService.update(productsBack);
        LOGGER.debug("ProductsBack details with id: {}", productsBack);
        return productsBack;
    }

    @ApiOperation(value = "Deletes the ProductsBack instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProductsBack(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProductsBack with id: {}", id);
        ProductsBack deletedProductsBack = productsBackService.delete(id);
        return deletedProductsBack != null;
    }

    /**
     * @deprecated Use {@link #findProductsBacks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ProductsBack instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductsBack> searchProductsBacksByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ProductsBacks list");
        return productsBackService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of ProductsBack instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProductsBack> findProductsBacks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProductsBacks list");
        return productsBackService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProductsBacks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return productsBackService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of ProductsBack instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countProductsBacks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ProductsBacks");
        return productsBackService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductsBackService instance
	 */
    protected void setProductsBackService(ProductsBackService service) {
        this.productsBackService = service;
    }
}

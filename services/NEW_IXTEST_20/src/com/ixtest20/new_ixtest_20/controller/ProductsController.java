/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Builds;
import com.ixtest20.new_ixtest_20.Engines;
import com.ixtest20.new_ixtest_20.IopBuildApps;
import com.ixtest20.new_ixtest_20.IopEnginesDetails;
import com.ixtest20.new_ixtest_20.Products;
import com.ixtest20.new_ixtest_20.Releases;
import com.ixtest20.new_ixtest_20.Testcaserun;
import com.ixtest20.new_ixtest_20.Testcases;
import com.ixtest20.new_ixtest_20.Testplan;
import com.ixtest20.new_ixtest_20.service.ProductsService;

/**
 * Controller object for domain model class Products.
 * @see Products
 */
@RestController("NEW_IXTEST_20.ProductsController")
@Api(value = "ProductsController", description = "Exposes APIs to work with Products resource.")
@RequestMapping("/NEW_IXTEST_20/Products")
public class ProductsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.ProductsService")
    private ProductsService productsService;

    @ApiOperation(value = "Creates a new Products instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Products createProducts(@RequestBody Products products) {
        LOGGER.debug("Create Products with information: {}", products);
        products = productsService.create(products);
        LOGGER.debug("Created Products with information: {}", products);
        return products;
    }

    @ApiOperation(value = "Returns the Products instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Products getProducts(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Products with id: {}", id);
        Products foundProducts = productsService.getById(id);
        LOGGER.debug("Products details with id: {}", foundProducts);
        return foundProducts;
    }

    @ApiOperation(value = "Updates the Products instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Products editProducts(@PathVariable("id") BigInteger id, @RequestBody Products products) throws EntityNotFoundException {
        LOGGER.debug("Editing Products with id: {}", products.getProductid());
        products.setProductid(id);
        products = productsService.update(products);
        LOGGER.debug("Products details with id: {}", products);
        return products;
    }

    @ApiOperation(value = "Deletes the Products instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProducts(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Products with id: {}", id);
        Products deletedProducts = productsService.delete(id);
        return deletedProducts != null;
    }

    /**
     * @deprecated Use {@link #findProducts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Products instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Products> searchProductsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Products list");
        return productsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Products instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Products> findProducts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Products list");
        return productsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProducts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return productsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Products instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countProducts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Products");
        return productsService.count(query);
    }

    @RequestMapping(value = "/{id}/buildses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the buildses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Builds> findAssociatedBuildses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated buildses");
        return productsService.findAssociatedBuildses(id, pageable);
    }

    @RequestMapping(value = "/{id}/engineses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the engineses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Engines> findAssociatedEngineses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineses");
        return productsService.findAssociatedEngineses(id, pageable);
    }

    @RequestMapping(value = "/{id}/iopBuildAppses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the iopBuildAppses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IopBuildApps> findAssociatedIopBuildAppses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated iopBuildAppses");
        return productsService.findAssociatedIopBuildAppses(id, pageable);
    }

    @RequestMapping(value = "/{id}/iopEnginesDetailses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the iopEnginesDetailses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IopEnginesDetails> findAssociatedIopEnginesDetailses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated iopEnginesDetailses");
        return productsService.findAssociatedIopEnginesDetailses(id, pageable);
    }

    @RequestMapping(value = "/{id}/releaseses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the releaseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Releases> findAssociatedReleaseses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated releaseses");
        return productsService.findAssociatedReleaseses(id, pageable);
    }

    @RequestMapping(value = "/{id}/testcaseruns", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the testcaseruns instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testcaserun> findAssociatedTestcaseruns(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated testcaseruns");
        return productsService.findAssociatedTestcaseruns(id, pageable);
    }

    @RequestMapping(value = "/{id}/testcaseses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the testcaseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testcases> findAssociatedTestcaseses(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated testcaseses");
        return productsService.findAssociatedTestcaseses(id, pageable);
    }

    @RequestMapping(value = "/{id}/testplans", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the testplans instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testplan> findAssociatedTestplans(@PathVariable("id") BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated testplans");
        return productsService.findAssociatedTestplans(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductsService instance
	 */
    protected void setProductsService(ProductsService service) {
        this.productsService = service;
    }
}

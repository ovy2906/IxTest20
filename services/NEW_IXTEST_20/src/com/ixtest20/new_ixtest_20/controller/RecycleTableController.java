/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.RecycleTable;
import com.ixtest20.new_ixtest_20.service.RecycleTableService;

/**
 * Controller object for domain model class RecycleTable.
 * @see RecycleTable
 */
@RestController("NEW_IXTEST_20.RecycleTableController")
@Api(value = "RecycleTableController", description = "Exposes APIs to work with RecycleTable resource.")
@RequestMapping("/NEW_IXTEST_20/RecycleTable")
public class RecycleTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RecycleTableController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.RecycleTableService")
    private RecycleTableService recycleTableService;

    @ApiOperation(value = "Creates a new RecycleTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RecycleTable createRecycleTable(@RequestBody RecycleTable recycleTable) {
        LOGGER.debug("Create RecycleTable with information: {}", recycleTable);
        recycleTable = recycleTableService.create(recycleTable);
        LOGGER.debug("Created RecycleTable with information: {}", recycleTable);
        return recycleTable;
    }

    @ApiOperation(value = "Returns the RecycleTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RecycleTable getRecycleTable(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting RecycleTable with id: {}", id);
        RecycleTable foundRecycleTable = recycleTableService.getById(id);
        LOGGER.debug("RecycleTable details with id: {}", foundRecycleTable);
        return foundRecycleTable;
    }

    @ApiOperation(value = "Updates the RecycleTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RecycleTable editRecycleTable(@PathVariable("id") BigDecimal id, @RequestBody RecycleTable recycleTable) throws EntityNotFoundException {
        LOGGER.debug("Editing RecycleTable with id: {}", recycleTable.getIdRecycle());
        recycleTable.setIdRecycle(id);
        recycleTable = recycleTableService.update(recycleTable);
        LOGGER.debug("RecycleTable details with id: {}", recycleTable);
        return recycleTable;
    }

    @ApiOperation(value = "Deletes the RecycleTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRecycleTable(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RecycleTable with id: {}", id);
        RecycleTable deletedRecycleTable = recycleTableService.delete(id);
        return deletedRecycleTable != null;
    }

    /**
     * @deprecated Use {@link #findRecycleTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RecycleTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RecycleTable> searchRecycleTablesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RecycleTables list");
        return recycleTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of RecycleTable instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RecycleTable> findRecycleTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RecycleTables list");
        return recycleTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRecycleTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return recycleTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of RecycleTable instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countRecycleTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting RecycleTables");
        return recycleTableService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RecycleTableService instance
	 */
    protected void setRecycleTableService(RecycleTableService service) {
        this.recycleTableService = service;
    }
}

/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Result;
import com.ixtest20.new_ixtest_20.service.ResultService;

/**
 * Controller object for domain model class Result.
 * @see Result
 */
@RestController("NEW_IXTEST_20.ResultController")
@Api(value = "ResultController", description = "Exposes APIs to work with Result resource.")
@RequestMapping("/NEW_IXTEST_20/Result")
public class ResultController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResultController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.ResultService")
    private ResultService resultService;

    @ApiOperation(value = "Creates a new Result instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Result createResult(@RequestBody Result result) {
        LOGGER.debug("Create Result with information: {}", result);
        result = resultService.create(result);
        LOGGER.debug("Created Result with information: {}", result);
        return result;
    }

    @ApiOperation(value = "Returns the Result instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Result getResult(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Result with id: {}", id);
        Result foundResult = resultService.getById(id);
        LOGGER.debug("Result details with id: {}", foundResult);
        return foundResult;
    }

    @ApiOperation(value = "Updates the Result instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Result editResult(@PathVariable("id") BigInteger id, @RequestBody Result result) throws EntityNotFoundException {
        LOGGER.debug("Editing Result with id: {}", result.getId());
        result.setId(id);
        result = resultService.update(result);
        LOGGER.debug("Result details with id: {}", result);
        return result;
    }

    @ApiOperation(value = "Deletes the Result instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteResult(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Result with id: {}", id);
        Result deletedResult = resultService.delete(id);
        return deletedResult != null;
    }

    /**
     * @deprecated Use {@link #findResults(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Result instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Result> searchResultsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Results list");
        return resultService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Result instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Result> findResults(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Results list");
        return resultService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportResults(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return resultService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Result instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countResults(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Results");
        return resultService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ResultService instance
	 */
    protected void setResultService(ResultService service) {
        this.resultService = service;
    }
}

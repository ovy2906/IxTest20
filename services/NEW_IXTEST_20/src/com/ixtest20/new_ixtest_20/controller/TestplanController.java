/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import java.math.BigInteger;
import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.ixtest20.new_ixtest_20.Testplan;
import com.ixtest20.new_ixtest_20.TestplanId;
import com.ixtest20.new_ixtest_20.service.TestplanService;

/**
 * Controller object for domain model class Testplan.
 * @see Testplan
 */
@RestController("NEW_IXTEST_20.TestplanController")
@Api(value = "TestplanController", description = "Exposes APIs to work with Testplan resource.")
@RequestMapping("/NEW_IXTEST_20/Testplan")
public class TestplanController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestplanController.class);

    @Autowired
    @Qualifier("NEW_IXTEST_20.TestplanService")
    private TestplanService testplanService;

    @ApiOperation(value = "Creates a new Testplan instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testplan createTestplan(@RequestBody Testplan testplan) {
        LOGGER.debug("Create Testplan with information: {}", testplan);
        testplan = testplanService.create(testplan);
        LOGGER.debug("Created Testplan with information: {}", testplan);
        return testplan;
    }

    @ApiOperation(value = "Returns the Testplan instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testplan getTestplan(@RequestParam(value = "branchid", required = true) BigInteger branchid, @RequestParam(value = "branchname", required = true) String branchname, @RequestParam(value = "productid", required = true) BigInteger productid, @RequestParam(value = "enginename", required = true) String enginename, @RequestParam(value = "maxtestcases", required = true) BigInteger maxtestcases, @RequestParam(value = "updatedby", required = true) String updatedby, @RequestParam(value = "updatedon", required = true) LocalDateTime updatedon, @RequestParam(value = "status", required = true) BigDecimal status) throws EntityNotFoundException {
        TestplanId testplanId = new TestplanId();
        testplanId.setBranchid(branchid);
        testplanId.setBranchname(branchname);
        testplanId.setProductid(productid);
        testplanId.setEnginename(enginename);
        testplanId.setMaxtestcases(maxtestcases);
        testplanId.setUpdatedby(updatedby);
        testplanId.setUpdatedon(updatedon);
        testplanId.setStatus(status);
        LOGGER.debug("Getting Testplan with id: {}", testplanId);
        Testplan testplan = testplanService.getById(testplanId);
        LOGGER.debug("Testplan details with id: {}", testplan);
        return testplan;
    }

    @ApiOperation(value = "Updates the Testplan instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testplan editTestplan(@RequestParam(value = "branchid", required = true) BigInteger branchid, @RequestParam(value = "branchname", required = true) String branchname, @RequestParam(value = "productid", required = true) BigInteger productid, @RequestParam(value = "enginename", required = true) String enginename, @RequestParam(value = "maxtestcases", required = true) BigInteger maxtestcases, @RequestParam(value = "updatedby", required = true) String updatedby, @RequestParam(value = "updatedon", required = true) LocalDateTime updatedon, @RequestParam(value = "status", required = true) BigDecimal status, @RequestBody Testplan testplan) throws EntityNotFoundException {
        testplan.setBranchid(branchid);
        testplan.setBranchname(branchname);
        testplan.setProductid(productid);
        testplan.setEnginename(enginename);
        testplan.setMaxtestcases(maxtestcases);
        testplan.setUpdatedby(updatedby);
        testplan.setUpdatedon(updatedon);
        testplan.setStatus(status);
        LOGGER.debug("Testplan details with id is updated with: {}", testplan);
        return testplanService.update(testplan);
    }

    @ApiOperation(value = "Deletes the Testplan instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestplan(@RequestParam(value = "branchid", required = true) BigInteger branchid, @RequestParam(value = "branchname", required = true) String branchname, @RequestParam(value = "productid", required = true) BigInteger productid, @RequestParam(value = "enginename", required = true) String enginename, @RequestParam(value = "maxtestcases", required = true) BigInteger maxtestcases, @RequestParam(value = "updatedby", required = true) String updatedby, @RequestParam(value = "updatedon", required = true) LocalDateTime updatedon, @RequestParam(value = "status", required = true) BigDecimal status) throws EntityNotFoundException {
        TestplanId testplanId = new TestplanId();
        testplanId.setBranchid(branchid);
        testplanId.setBranchname(branchname);
        testplanId.setProductid(productid);
        testplanId.setEnginename(enginename);
        testplanId.setMaxtestcases(maxtestcases);
        testplanId.setUpdatedby(updatedby);
        testplanId.setUpdatedon(updatedon);
        testplanId.setStatus(status);
        LOGGER.debug("Deleting Testplan with id: {}", testplanId);
        Testplan testplan = testplanService.delete(testplanId);
        return testplan != null;
    }

    /**
     * @deprecated Use {@link #findTestplans(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testplan instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testplan> searchTestplansByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testplans list");
        return testplanService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Testplan instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testplan> findTestplans(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testplans list");
        return testplanService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestplans(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return testplanService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Testplan instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTestplans(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Testplans");
        return testplanService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestplanService instance
	 */
    protected void setTestplanService(TestplanService service) {
        this.testplanService = service;
    }
}

/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AssociatedApp;

/**
 * Service object for domain model class {@link AssociatedApp}.
 */
public interface AssociatedAppService {

    /**
     * Creates a new AssociatedApp. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AssociatedApp if any.
     *
     * @param associatedApp Details of the AssociatedApp to be created; value cannot be null.
     * @return The newly created AssociatedApp.
     */
	AssociatedApp create(AssociatedApp associatedApp);


	/**
	 * Returns AssociatedApp by given id if exists.
	 *
	 * @param associatedappId The id of the AssociatedApp to get; value cannot be null.
	 * @return AssociatedApp associated with the given associatedappId.
     * @throws EntityNotFoundException If no AssociatedApp is found.
	 */
	AssociatedApp getById(BigInteger associatedappId) throws EntityNotFoundException;

    /**
	 * Find and return the AssociatedApp by given id if exists, returns null otherwise.
	 *
	 * @param associatedappId The id of the AssociatedApp to get; value cannot be null.
	 * @return AssociatedApp associated with the given associatedappId.
	 */
	AssociatedApp findById(BigInteger associatedappId);


	/**
	 * Updates the details of an existing AssociatedApp. It replaces all fields of the existing AssociatedApp with the given associatedApp.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AssociatedApp if any.
     *
	 * @param associatedApp The details of the AssociatedApp to be updated; value cannot be null.
	 * @return The updated AssociatedApp.
	 * @throws EntityNotFoundException if no AssociatedApp is found with given input.
	 */
	AssociatedApp update(AssociatedApp associatedApp) throws EntityNotFoundException;

    /**
	 * Deletes an existing AssociatedApp with the given id.
	 *
	 * @param associatedappId The id of the AssociatedApp to be deleted; value cannot be null.
	 * @return The deleted AssociatedApp.
	 * @throws EntityNotFoundException if no AssociatedApp found with the given id.
	 */
	AssociatedApp delete(BigInteger associatedappId) throws EntityNotFoundException;

	/**
	 * Find all AssociatedApps matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AssociatedApps.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AssociatedApp> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AssociatedApps matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AssociatedApps.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AssociatedApp> findAll(String query, Pageable pageable);

    /**
	 * Exports all AssociatedApps matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AssociatedApps in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AssociatedApp.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthGroupPermissions;

/**
 * Service object for domain model class {@link AuthGroupPermissions}.
 */
public interface AuthGroupPermissionsService {

    /**
     * Creates a new AuthGroupPermissions. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AuthGroupPermissions if any.
     *
     * @param authGroupPermissions Details of the AuthGroupPermissions to be created; value cannot be null.
     * @return The newly created AuthGroupPermissions.
     */
	AuthGroupPermissions create(AuthGroupPermissions authGroupPermissions);


	/**
	 * Returns AuthGroupPermissions by given id if exists.
	 *
	 * @param authgrouppermissionsId The id of the AuthGroupPermissions to get; value cannot be null.
	 * @return AuthGroupPermissions associated with the given authgrouppermissionsId.
     * @throws EntityNotFoundException If no AuthGroupPermissions is found.
	 */
	AuthGroupPermissions getById(BigInteger authgrouppermissionsId) throws EntityNotFoundException;

    /**
	 * Find and return the AuthGroupPermissions by given id if exists, returns null otherwise.
	 *
	 * @param authgrouppermissionsId The id of the AuthGroupPermissions to get; value cannot be null.
	 * @return AuthGroupPermissions associated with the given authgrouppermissionsId.
	 */
	AuthGroupPermissions findById(BigInteger authgrouppermissionsId);


	/**
	 * Updates the details of an existing AuthGroupPermissions. It replaces all fields of the existing AuthGroupPermissions with the given authGroupPermissions.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AuthGroupPermissions if any.
     *
	 * @param authGroupPermissions The details of the AuthGroupPermissions to be updated; value cannot be null.
	 * @return The updated AuthGroupPermissions.
	 * @throws EntityNotFoundException if no AuthGroupPermissions is found with given input.
	 */
	AuthGroupPermissions update(AuthGroupPermissions authGroupPermissions) throws EntityNotFoundException;

    /**
	 * Deletes an existing AuthGroupPermissions with the given id.
	 *
	 * @param authgrouppermissionsId The id of the AuthGroupPermissions to be deleted; value cannot be null.
	 * @return The deleted AuthGroupPermissions.
	 * @throws EntityNotFoundException if no AuthGroupPermissions found with the given id.
	 */
	AuthGroupPermissions delete(BigInteger authgrouppermissionsId) throws EntityNotFoundException;

	/**
	 * Find all AuthGroupPermissions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthGroupPermissions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AuthGroupPermissions> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AuthGroupPermissions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthGroupPermissions.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AuthGroupPermissions> findAll(String query, Pageable pageable);

    /**
	 * Exports all AuthGroupPermissions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AuthGroupPermissions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AuthGroupPermissions.
	 */
	long count(String query);


}


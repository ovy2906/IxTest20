/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthGroupPermissions;


/**
 * ServiceImpl object for domain model class AuthGroupPermissions.
 *
 * @see AuthGroupPermissions
 */
@Service("NEW_IXTEST_20.AuthGroupPermissionsService")
public class AuthGroupPermissionsServiceImpl implements AuthGroupPermissionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthGroupPermissionsServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthGroupPermissionsDao")
    private WMGenericDao<AuthGroupPermissions, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuthGroupPermissions, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public AuthGroupPermissions create(AuthGroupPermissions authGroupPermissions) {
        LOGGER.debug("Creating a new AuthGroupPermissions with information: {}", authGroupPermissions);
        AuthGroupPermissions authGroupPermissionsCreated = this.wmGenericDao.create(authGroupPermissions);
        return authGroupPermissionsCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroupPermissions getById(BigInteger authgrouppermissionsId) throws EntityNotFoundException {
        LOGGER.debug("Finding AuthGroupPermissions by id: {}", authgrouppermissionsId);
        AuthGroupPermissions authGroupPermissions = this.wmGenericDao.findById(authgrouppermissionsId);
        if (authGroupPermissions == null){
            LOGGER.debug("No AuthGroupPermissions found with id: {}", authgrouppermissionsId);
            throw new EntityNotFoundException(String.valueOf(authgrouppermissionsId));
        }
        return authGroupPermissions;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroupPermissions findById(BigInteger authgrouppermissionsId) {
        LOGGER.debug("Finding AuthGroupPermissions by id: {}", authgrouppermissionsId);
        return this.wmGenericDao.findById(authgrouppermissionsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroupPermissions update(AuthGroupPermissions authGroupPermissions) throws EntityNotFoundException {
        LOGGER.debug("Updating AuthGroupPermissions with information: {}", authGroupPermissions);
        this.wmGenericDao.update(authGroupPermissions);

        BigInteger authgrouppermissionsId = authGroupPermissions.getId();

        return this.wmGenericDao.findById(authgrouppermissionsId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroupPermissions delete(BigInteger authgrouppermissionsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthGroupPermissions with id: {}", authgrouppermissionsId);
        AuthGroupPermissions deleted = this.wmGenericDao.findById(authgrouppermissionsId);
        if (deleted == null) {
            LOGGER.debug("No AuthGroupPermissions found with id: {}", authgrouppermissionsId);
            throw new EntityNotFoundException(String.valueOf(authgrouppermissionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<AuthGroupPermissions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AuthGroupPermissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<AuthGroupPermissions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AuthGroupPermissions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table AuthGroupPermissions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthGroup;


/**
 * ServiceImpl object for domain model class AuthGroup.
 *
 * @see AuthGroup
 */
@Service("NEW_IXTEST_20.AuthGroupService")
public class AuthGroupServiceImpl implements AuthGroupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthGroupServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthGroupDao")
    private WMGenericDao<AuthGroup, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuthGroup, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public AuthGroup create(AuthGroup authGroup) {
        LOGGER.debug("Creating a new AuthGroup with information: {}", authGroup);
        AuthGroup authGroupCreated = this.wmGenericDao.create(authGroup);
        return authGroupCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroup getById(BigInteger authgroupId) throws EntityNotFoundException {
        LOGGER.debug("Finding AuthGroup by id: {}", authgroupId);
        AuthGroup authGroup = this.wmGenericDao.findById(authgroupId);
        if (authGroup == null){
            LOGGER.debug("No AuthGroup found with id: {}", authgroupId);
            throw new EntityNotFoundException(String.valueOf(authgroupId));
        }
        return authGroup;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroup findById(BigInteger authgroupId) {
        LOGGER.debug("Finding AuthGroup by id: {}", authgroupId);
        return this.wmGenericDao.findById(authgroupId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroup update(AuthGroup authGroup) throws EntityNotFoundException {
        LOGGER.debug("Updating AuthGroup with information: {}", authGroup);
        this.wmGenericDao.update(authGroup);

        BigInteger authgroupId = authGroup.getId();

        return this.wmGenericDao.findById(authgroupId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthGroup delete(BigInteger authgroupId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthGroup with id: {}", authgroupId);
        AuthGroup deleted = this.wmGenericDao.findById(authgroupId);
        if (deleted == null) {
            LOGGER.debug("No AuthGroup found with id: {}", authgroupId);
            throw new EntityNotFoundException(String.valueOf(authgroupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<AuthGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AuthGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<AuthGroup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AuthGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table AuthGroup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


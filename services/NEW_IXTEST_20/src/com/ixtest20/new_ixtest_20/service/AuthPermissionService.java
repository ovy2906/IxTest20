/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthPermission;

/**
 * Service object for domain model class {@link AuthPermission}.
 */
public interface AuthPermissionService {

    /**
     * Creates a new AuthPermission. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AuthPermission if any.
     *
     * @param authPermission Details of the AuthPermission to be created; value cannot be null.
     * @return The newly created AuthPermission.
     */
	AuthPermission create(AuthPermission authPermission);


	/**
	 * Returns AuthPermission by given id if exists.
	 *
	 * @param authpermissionId The id of the AuthPermission to get; value cannot be null.
	 * @return AuthPermission associated with the given authpermissionId.
     * @throws EntityNotFoundException If no AuthPermission is found.
	 */
	AuthPermission getById(BigInteger authpermissionId) throws EntityNotFoundException;

    /**
	 * Find and return the AuthPermission by given id if exists, returns null otherwise.
	 *
	 * @param authpermissionId The id of the AuthPermission to get; value cannot be null.
	 * @return AuthPermission associated with the given authpermissionId.
	 */
	AuthPermission findById(BigInteger authpermissionId);


	/**
	 * Updates the details of an existing AuthPermission. It replaces all fields of the existing AuthPermission with the given authPermission.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AuthPermission if any.
     *
	 * @param authPermission The details of the AuthPermission to be updated; value cannot be null.
	 * @return The updated AuthPermission.
	 * @throws EntityNotFoundException if no AuthPermission is found with given input.
	 */
	AuthPermission update(AuthPermission authPermission) throws EntityNotFoundException;

    /**
	 * Deletes an existing AuthPermission with the given id.
	 *
	 * @param authpermissionId The id of the AuthPermission to be deleted; value cannot be null.
	 * @return The deleted AuthPermission.
	 * @throws EntityNotFoundException if no AuthPermission found with the given id.
	 */
	AuthPermission delete(BigInteger authpermissionId) throws EntityNotFoundException;

	/**
	 * Find all AuthPermissions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthPermissions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AuthPermission> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AuthPermissions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthPermissions.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AuthPermission> findAll(String query, Pageable pageable);

    /**
	 * Exports all AuthPermissions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AuthPermissions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AuthPermission.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthUserGroups;


/**
 * ServiceImpl object for domain model class AuthUserGroups.
 *
 * @see AuthUserGroups
 */
@Service("NEW_IXTEST_20.AuthUserGroupsService")
public class AuthUserGroupsServiceImpl implements AuthUserGroupsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthUserGroupsServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthUserGroupsDao")
    private WMGenericDao<AuthUserGroups, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuthUserGroups, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public AuthUserGroups create(AuthUserGroups authUserGroups) {
        LOGGER.debug("Creating a new AuthUserGroups with information: {}", authUserGroups);
        AuthUserGroups authUserGroupsCreated = this.wmGenericDao.create(authUserGroups);
        return authUserGroupsCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserGroups getById(BigInteger authusergroupsId) throws EntityNotFoundException {
        LOGGER.debug("Finding AuthUserGroups by id: {}", authusergroupsId);
        AuthUserGroups authUserGroups = this.wmGenericDao.findById(authusergroupsId);
        if (authUserGroups == null){
            LOGGER.debug("No AuthUserGroups found with id: {}", authusergroupsId);
            throw new EntityNotFoundException(String.valueOf(authusergroupsId));
        }
        return authUserGroups;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserGroups findById(BigInteger authusergroupsId) {
        LOGGER.debug("Finding AuthUserGroups by id: {}", authusergroupsId);
        return this.wmGenericDao.findById(authusergroupsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserGroups update(AuthUserGroups authUserGroups) throws EntityNotFoundException {
        LOGGER.debug("Updating AuthUserGroups with information: {}", authUserGroups);
        this.wmGenericDao.update(authUserGroups);

        BigInteger authusergroupsId = authUserGroups.getId();

        return this.wmGenericDao.findById(authusergroupsId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserGroups delete(BigInteger authusergroupsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthUserGroups with id: {}", authusergroupsId);
        AuthUserGroups deleted = this.wmGenericDao.findById(authusergroupsId);
        if (deleted == null) {
            LOGGER.debug("No AuthUserGroups found with id: {}", authusergroupsId);
            throw new EntityNotFoundException(String.valueOf(authusergroupsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<AuthUserGroups> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AuthUserGroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<AuthUserGroups> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AuthUserGroups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table AuthUserGroups to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


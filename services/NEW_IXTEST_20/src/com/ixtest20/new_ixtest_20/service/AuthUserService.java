/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthUser;

/**
 * Service object for domain model class {@link AuthUser}.
 */
public interface AuthUserService {

    /**
     * Creates a new AuthUser. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AuthUser if any.
     *
     * @param authUser Details of the AuthUser to be created; value cannot be null.
     * @return The newly created AuthUser.
     */
	AuthUser create(AuthUser authUser);


	/**
	 * Returns AuthUser by given id if exists.
	 *
	 * @param authuserId The id of the AuthUser to get; value cannot be null.
	 * @return AuthUser associated with the given authuserId.
     * @throws EntityNotFoundException If no AuthUser is found.
	 */
	AuthUser getById(BigInteger authuserId) throws EntityNotFoundException;

    /**
	 * Find and return the AuthUser by given id if exists, returns null otherwise.
	 *
	 * @param authuserId The id of the AuthUser to get; value cannot be null.
	 * @return AuthUser associated with the given authuserId.
	 */
	AuthUser findById(BigInteger authuserId);


	/**
	 * Updates the details of an existing AuthUser. It replaces all fields of the existing AuthUser with the given authUser.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AuthUser if any.
     *
	 * @param authUser The details of the AuthUser to be updated; value cannot be null.
	 * @return The updated AuthUser.
	 * @throws EntityNotFoundException if no AuthUser is found with given input.
	 */
	AuthUser update(AuthUser authUser) throws EntityNotFoundException;

    /**
	 * Deletes an existing AuthUser with the given id.
	 *
	 * @param authuserId The id of the AuthUser to be deleted; value cannot be null.
	 * @return The deleted AuthUser.
	 * @throws EntityNotFoundException if no AuthUser found with the given id.
	 */
	AuthUser delete(BigInteger authuserId) throws EntityNotFoundException;

	/**
	 * Find all AuthUsers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthUsers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AuthUser> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AuthUsers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthUsers.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AuthUser> findAll(String query, Pageable pageable);

    /**
	 * Exports all AuthUsers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AuthUsers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AuthUser.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthUser;
import com.ixtest20.new_ixtest_20.AuthUserGroups;
import com.ixtest20.new_ixtest_20.AuthUserUserPermissions;


/**
 * ServiceImpl object for domain model class AuthUser.
 *
 * @see AuthUser
 */
@Service("NEW_IXTEST_20.AuthUserService")
public class AuthUserServiceImpl implements AuthUserService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthUserServiceImpl.class);

    @Autowired
	@Qualifier("NEW_IXTEST_20.AuthUserGroupsService")
	private AuthUserGroupsService authUserGroupsService;

    @Autowired
	@Qualifier("NEW_IXTEST_20.AuthUserUserPermissionsService")
	private AuthUserUserPermissionsService authUserUserPermissionsService;

    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthUserDao")
    private WMGenericDao<AuthUser, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuthUser, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public AuthUser create(AuthUser authUser) {
        LOGGER.debug("Creating a new AuthUser with information: {}", authUser);
        AuthUser authUserCreated = this.wmGenericDao.create(authUser);
        if(authUserCreated.getAuthUserGroupses() != null) {
            for(AuthUserGroups authUserGroupse : authUserCreated.getAuthUserGroupses()) {
                authUserGroupse.setAuthUser(authUserCreated);
                LOGGER.debug("Creating a new child AuthUserGroups with information: {}", authUserGroupse);
                authUserGroupsService.create(authUserGroupse);
            }
        }

        if(authUserCreated.getAuthUserUserPermissionses() != null) {
            for(AuthUserUserPermissions authUserUserPermissionse : authUserCreated.getAuthUserUserPermissionses()) {
                authUserUserPermissionse.setAuthUser(authUserCreated);
                LOGGER.debug("Creating a new child AuthUserUserPermissions with information: {}", authUserUserPermissionse);
                authUserUserPermissionsService.create(authUserUserPermissionse);
            }
        }
        return authUserCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUser getById(BigInteger authuserId) throws EntityNotFoundException {
        LOGGER.debug("Finding AuthUser by id: {}", authuserId);
        AuthUser authUser = this.wmGenericDao.findById(authuserId);
        if (authUser == null){
            LOGGER.debug("No AuthUser found with id: {}", authuserId);
            throw new EntityNotFoundException(String.valueOf(authuserId));
        }
        return authUser;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUser findById(BigInteger authuserId) {
        LOGGER.debug("Finding AuthUser by id: {}", authuserId);
        return this.wmGenericDao.findById(authuserId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUser update(AuthUser authUser) throws EntityNotFoundException {
        LOGGER.debug("Updating AuthUser with information: {}", authUser);
        this.wmGenericDao.update(authUser);

        BigInteger authuserId = authUser.getId();

        return this.wmGenericDao.findById(authuserId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUser delete(BigInteger authuserId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthUser with id: {}", authuserId);
        AuthUser deleted = this.wmGenericDao.findById(authuserId);
        if (deleted == null) {
            LOGGER.debug("No AuthUser found with id: {}", authuserId);
            throw new EntityNotFoundException(String.valueOf(authuserId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<AuthUser> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AuthUsers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<AuthUser> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AuthUsers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table AuthUser to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<AuthUserGroups> findAssociatedAuthUserGroupses(BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authUserGroupses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("authUser.id = '" + id + "'");

        return authUserGroupsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<AuthUserUserPermissions> findAssociatedAuthUserUserPermissionses(BigInteger id, Pageable pageable) {
        LOGGER.debug("Fetching all associated authUserUserPermissionses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("authUser.id = '" + id + "'");

        return authUserUserPermissionsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthUserGroupsService instance
	 */
	protected void setAuthUserGroupsService(AuthUserGroupsService service) {
        this.authUserGroupsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuthUserUserPermissionsService instance
	 */
	protected void setAuthUserUserPermissionsService(AuthUserUserPermissionsService service) {
        this.authUserUserPermissionsService = service;
    }

}


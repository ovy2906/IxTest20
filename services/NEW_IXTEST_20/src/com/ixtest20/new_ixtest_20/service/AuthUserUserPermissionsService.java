/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthUserUserPermissions;

/**
 * Service object for domain model class {@link AuthUserUserPermissions}.
 */
public interface AuthUserUserPermissionsService {

    /**
     * Creates a new AuthUserUserPermissions. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AuthUserUserPermissions if any.
     *
     * @param authUserUserPermissions Details of the AuthUserUserPermissions to be created; value cannot be null.
     * @return The newly created AuthUserUserPermissions.
     */
	AuthUserUserPermissions create(AuthUserUserPermissions authUserUserPermissions);


	/**
	 * Returns AuthUserUserPermissions by given id if exists.
	 *
	 * @param authuseruserpermissionsId The id of the AuthUserUserPermissions to get; value cannot be null.
	 * @return AuthUserUserPermissions associated with the given authuseruserpermissionsId.
     * @throws EntityNotFoundException If no AuthUserUserPermissions is found.
	 */
	AuthUserUserPermissions getById(BigInteger authuseruserpermissionsId) throws EntityNotFoundException;

    /**
	 * Find and return the AuthUserUserPermissions by given id if exists, returns null otherwise.
	 *
	 * @param authuseruserpermissionsId The id of the AuthUserUserPermissions to get; value cannot be null.
	 * @return AuthUserUserPermissions associated with the given authuseruserpermissionsId.
	 */
	AuthUserUserPermissions findById(BigInteger authuseruserpermissionsId);


	/**
	 * Updates the details of an existing AuthUserUserPermissions. It replaces all fields of the existing AuthUserUserPermissions with the given authUserUserPermissions.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AuthUserUserPermissions if any.
     *
	 * @param authUserUserPermissions The details of the AuthUserUserPermissions to be updated; value cannot be null.
	 * @return The updated AuthUserUserPermissions.
	 * @throws EntityNotFoundException if no AuthUserUserPermissions is found with given input.
	 */
	AuthUserUserPermissions update(AuthUserUserPermissions authUserUserPermissions) throws EntityNotFoundException;

    /**
	 * Deletes an existing AuthUserUserPermissions with the given id.
	 *
	 * @param authuseruserpermissionsId The id of the AuthUserUserPermissions to be deleted; value cannot be null.
	 * @return The deleted AuthUserUserPermissions.
	 * @throws EntityNotFoundException if no AuthUserUserPermissions found with the given id.
	 */
	AuthUserUserPermissions delete(BigInteger authuseruserpermissionsId) throws EntityNotFoundException;

	/**
	 * Find all AuthUserUserPermissions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthUserUserPermissions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AuthUserUserPermissions> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AuthUserUserPermissions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AuthUserUserPermissions.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AuthUserUserPermissions> findAll(String query, Pageable pageable);

    /**
	 * Exports all AuthUserUserPermissions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AuthUserUserPermissions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AuthUserUserPermissions.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.AuthUserUserPermissions;


/**
 * ServiceImpl object for domain model class AuthUserUserPermissions.
 *
 * @see AuthUserUserPermissions
 */
@Service("NEW_IXTEST_20.AuthUserUserPermissionsService")
public class AuthUserUserPermissionsServiceImpl implements AuthUserUserPermissionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthUserUserPermissionsServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.AuthUserUserPermissionsDao")
    private WMGenericDao<AuthUserUserPermissions, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuthUserUserPermissions, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public AuthUserUserPermissions create(AuthUserUserPermissions authUserUserPermissions) {
        LOGGER.debug("Creating a new AuthUserUserPermissions with information: {}", authUserUserPermissions);
        AuthUserUserPermissions authUserUserPermissionsCreated = this.wmGenericDao.create(authUserUserPermissions);
        return authUserUserPermissionsCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserUserPermissions getById(BigInteger authuseruserpermissionsId) throws EntityNotFoundException {
        LOGGER.debug("Finding AuthUserUserPermissions by id: {}", authuseruserpermissionsId);
        AuthUserUserPermissions authUserUserPermissions = this.wmGenericDao.findById(authuseruserpermissionsId);
        if (authUserUserPermissions == null){
            LOGGER.debug("No AuthUserUserPermissions found with id: {}", authuseruserpermissionsId);
            throw new EntityNotFoundException(String.valueOf(authuseruserpermissionsId));
        }
        return authUserUserPermissions;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserUserPermissions findById(BigInteger authuseruserpermissionsId) {
        LOGGER.debug("Finding AuthUserUserPermissions by id: {}", authuseruserpermissionsId);
        return this.wmGenericDao.findById(authuseruserpermissionsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserUserPermissions update(AuthUserUserPermissions authUserUserPermissions) throws EntityNotFoundException {
        LOGGER.debug("Updating AuthUserUserPermissions with information: {}", authUserUserPermissions);
        this.wmGenericDao.update(authUserUserPermissions);

        BigInteger authuseruserpermissionsId = authUserUserPermissions.getId();

        return this.wmGenericDao.findById(authuseruserpermissionsId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public AuthUserUserPermissions delete(BigInteger authuseruserpermissionsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AuthUserUserPermissions with id: {}", authuseruserpermissionsId);
        AuthUserUserPermissions deleted = this.wmGenericDao.findById(authuseruserpermissionsId);
        if (deleted == null) {
            LOGGER.debug("No AuthUserUserPermissions found with id: {}", authuseruserpermissionsId);
            throw new EntityNotFoundException(String.valueOf(authuseruserpermissionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<AuthUserUserPermissions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AuthUserUserPermissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<AuthUserUserPermissions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AuthUserUserPermissions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table AuthUserUserPermissions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Bugstatus;

/**
 * Service object for domain model class {@link Bugstatus}.
 */
public interface BugstatusService {

    /**
     * Creates a new Bugstatus. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Bugstatus if any.
     *
     * @param bugstatusInstance Details of the Bugstatus to be created; value cannot be null.
     * @return The newly created Bugstatus.
     */
	Bugstatus create(Bugstatus bugstatusInstance);


	/**
	 * Returns Bugstatus by given id if exists.
	 *
	 * @param bugstatusId The id of the Bugstatus to get; value cannot be null.
	 * @return Bugstatus associated with the given bugstatusId.
     * @throws EntityNotFoundException If no Bugstatus is found.
	 */
	Bugstatus getById(Integer bugstatusId) throws EntityNotFoundException;

    /**
	 * Find and return the Bugstatus by given id if exists, returns null otherwise.
	 *
	 * @param bugstatusId The id of the Bugstatus to get; value cannot be null.
	 * @return Bugstatus associated with the given bugstatusId.
	 */
	Bugstatus findById(Integer bugstatusId);


	/**
	 * Updates the details of an existing Bugstatus. It replaces all fields of the existing Bugstatus with the given bugstatusInstance.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Bugstatus if any.
     *
	 * @param bugstatusInstance The details of the Bugstatus to be updated; value cannot be null.
	 * @return The updated Bugstatus.
	 * @throws EntityNotFoundException if no Bugstatus is found with given input.
	 */
	Bugstatus update(Bugstatus bugstatusInstance) throws EntityNotFoundException;

    /**
	 * Deletes an existing Bugstatus with the given id.
	 *
	 * @param bugstatusId The id of the Bugstatus to be deleted; value cannot be null.
	 * @return The deleted Bugstatus.
	 * @throws EntityNotFoundException if no Bugstatus found with the given id.
	 */
	Bugstatus delete(Integer bugstatusId) throws EntityNotFoundException;

	/**
	 * Find all Bugstatuses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Bugstatuses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Bugstatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Bugstatuses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Bugstatuses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Bugstatus> findAll(String query, Pageable pageable);

    /**
	 * Exports all Bugstatuses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Bugstatuses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Bugstatus.
	 */
	long count(String query);


}


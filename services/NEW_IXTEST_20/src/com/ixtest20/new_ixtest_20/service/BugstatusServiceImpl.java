/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Bugstatus;


/**
 * ServiceImpl object for domain model class Bugstatus.
 *
 * @see Bugstatus
 */
@Service("NEW_IXTEST_20.BugstatusService")
public class BugstatusServiceImpl implements BugstatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BugstatusServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.BugstatusDao")
    private WMGenericDao<Bugstatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Bugstatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Bugstatus create(Bugstatus bugstatusInstance) {
        LOGGER.debug("Creating a new Bugstatus with information: {}", bugstatusInstance);
        Bugstatus bugstatusInstanceCreated = this.wmGenericDao.create(bugstatusInstance);
        return bugstatusInstanceCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugstatus getById(Integer bugstatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding Bugstatus by id: {}", bugstatusId);
        Bugstatus bugstatusInstance = this.wmGenericDao.findById(bugstatusId);
        if (bugstatusInstance == null){
            LOGGER.debug("No Bugstatus found with id: {}", bugstatusId);
            throw new EntityNotFoundException(String.valueOf(bugstatusId));
        }
        return bugstatusInstance;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugstatus findById(Integer bugstatusId) {
        LOGGER.debug("Finding Bugstatus by id: {}", bugstatusId);
        return this.wmGenericDao.findById(bugstatusId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugstatus update(Bugstatus bugstatusInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating Bugstatus with information: {}", bugstatusInstance);
        this.wmGenericDao.update(bugstatusInstance);

        Integer bugstatusId = bugstatusInstance.getStatusid();

        return this.wmGenericDao.findById(bugstatusId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugstatus delete(Integer bugstatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bugstatus with id: {}", bugstatusId);
        Bugstatus deleted = this.wmGenericDao.findById(bugstatusId);
        if (deleted == null) {
            LOGGER.debug("No Bugstatus found with id: {}", bugstatusId);
            throw new EntityNotFoundException(String.valueOf(bugstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Bugstatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Bugstatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Bugstatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Bugstatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Bugstatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


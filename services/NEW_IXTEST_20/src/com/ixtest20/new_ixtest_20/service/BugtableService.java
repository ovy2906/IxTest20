/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Bugtable;
import com.ixtest20.new_ixtest_20.PBugtableRun;

/**
 * Service object for domain model class {@link Bugtable}.
 */
public interface BugtableService {

    /**
     * Creates a new Bugtable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Bugtable if any.
     *
     * @param bugtable Details of the Bugtable to be created; value cannot be null.
     * @return The newly created Bugtable.
     */
	Bugtable create(Bugtable bugtable);


	/**
	 * Returns Bugtable by given id if exists.
	 *
	 * @param bugtableId The id of the Bugtable to get; value cannot be null.
	 * @return Bugtable associated with the given bugtableId.
     * @throws EntityNotFoundException If no Bugtable is found.
	 */
	Bugtable getById(BigInteger bugtableId) throws EntityNotFoundException;

    /**
	 * Find and return the Bugtable by given id if exists, returns null otherwise.
	 *
	 * @param bugtableId The id of the Bugtable to get; value cannot be null.
	 * @return Bugtable associated with the given bugtableId.
	 */
	Bugtable findById(BigInteger bugtableId);


	/**
	 * Updates the details of an existing Bugtable. It replaces all fields of the existing Bugtable with the given bugtable.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Bugtable if any.
     *
	 * @param bugtable The details of the Bugtable to be updated; value cannot be null.
	 * @return The updated Bugtable.
	 * @throws EntityNotFoundException if no Bugtable is found with given input.
	 */
	Bugtable update(Bugtable bugtable) throws EntityNotFoundException;

    /**
	 * Deletes an existing Bugtable with the given id.
	 *
	 * @param bugtableId The id of the Bugtable to be deleted; value cannot be null.
	 * @return The deleted Bugtable.
	 * @throws EntityNotFoundException if no Bugtable found with the given id.
	 */
	Bugtable delete(BigInteger bugtableId) throws EntityNotFoundException;

	/**
	 * Find all Bugtables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Bugtables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Bugtable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Bugtables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Bugtables.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Bugtable> findAll(String query, Pageable pageable);

    /**
	 * Exports all Bugtables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Bugtables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Bugtable.
	 */
	long count(String query);

    /*
     * Returns the associated pbugtableRuns for given Bugtable id.
     *
     * @param bugid value of bugid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated PBugtableRun instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<PBugtableRun> findAssociatedPbugtableRuns(BigInteger bugid, Pageable pageable);

}


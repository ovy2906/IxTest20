/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Bugtable;


/**
 * ServiceImpl object for domain model class Bugtable.
 *
 * @see Bugtable
 */
@Service("NEW_IXTEST_20.BugtableService")
public class BugtableServiceImpl implements BugtableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BugtableServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.BugtableDao")
    private WMGenericDao<Bugtable, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Bugtable, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Bugtable create(Bugtable bugtable) {
        LOGGER.debug("Creating a new Bugtable with information: {}", bugtable);
        Bugtable bugtableCreated = this.wmGenericDao.create(bugtable);
        return bugtableCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugtable getById(BigInteger bugtableId) throws EntityNotFoundException {
        LOGGER.debug("Finding Bugtable by id: {}", bugtableId);
        Bugtable bugtable = this.wmGenericDao.findById(bugtableId);
        if (bugtable == null){
            LOGGER.debug("No Bugtable found with id: {}", bugtableId);
            throw new EntityNotFoundException(String.valueOf(bugtableId));
        }
        return bugtable;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugtable findById(BigInteger bugtableId) {
        LOGGER.debug("Finding Bugtable by id: {}", bugtableId);
        return this.wmGenericDao.findById(bugtableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugtable update(Bugtable bugtable) throws EntityNotFoundException {
        LOGGER.debug("Updating Bugtable with information: {}", bugtable);
        this.wmGenericDao.update(bugtable);

        BigInteger bugtableId = bugtable.getBugid();

        return this.wmGenericDao.findById(bugtableId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Bugtable delete(BigInteger bugtableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bugtable with id: {}", bugtableId);
        Bugtable deleted = this.wmGenericDao.findById(bugtableId);
        if (deleted == null) {
            LOGGER.debug("No Bugtable found with id: {}", bugtableId);
            throw new EntityNotFoundException(String.valueOf(bugtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Bugtable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Bugtables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Bugtable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Bugtables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Bugtable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


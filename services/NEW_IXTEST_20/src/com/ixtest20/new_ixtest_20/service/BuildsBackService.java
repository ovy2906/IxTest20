/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.BuildsBack;

/**
 * Service object for domain model class {@link BuildsBack}.
 */
public interface BuildsBackService {

    /**
     * Creates a new BuildsBack. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BuildsBack if any.
     *
     * @param buildsBack Details of the BuildsBack to be created; value cannot be null.
     * @return The newly created BuildsBack.
     */
	BuildsBack create(BuildsBack buildsBack);


	/**
	 * Returns BuildsBack by given id if exists.
	 *
	 * @param buildsbackId The id of the BuildsBack to get; value cannot be null.
	 * @return BuildsBack associated with the given buildsbackId.
     * @throws EntityNotFoundException If no BuildsBack is found.
	 */
	BuildsBack getById(BigInteger buildsbackId) throws EntityNotFoundException;

    /**
	 * Find and return the BuildsBack by given id if exists, returns null otherwise.
	 *
	 * @param buildsbackId The id of the BuildsBack to get; value cannot be null.
	 * @return BuildsBack associated with the given buildsbackId.
	 */
	BuildsBack findById(BigInteger buildsbackId);


	/**
	 * Updates the details of an existing BuildsBack. It replaces all fields of the existing BuildsBack with the given buildsBack.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on BuildsBack if any.
     *
	 * @param buildsBack The details of the BuildsBack to be updated; value cannot be null.
	 * @return The updated BuildsBack.
	 * @throws EntityNotFoundException if no BuildsBack is found with given input.
	 */
	BuildsBack update(BuildsBack buildsBack) throws EntityNotFoundException;

    /**
	 * Deletes an existing BuildsBack with the given id.
	 *
	 * @param buildsbackId The id of the BuildsBack to be deleted; value cannot be null.
	 * @return The deleted BuildsBack.
	 * @throws EntityNotFoundException if no BuildsBack found with the given id.
	 */
	BuildsBack delete(BigInteger buildsbackId) throws EntityNotFoundException;

	/**
	 * Find all BuildsBacks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BuildsBacks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<BuildsBack> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all BuildsBacks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BuildsBacks.
     *
     * @see Pageable
     * @see Page
	 */
    Page<BuildsBack> findAll(String query, Pageable pageable);

    /**
	 * Exports all BuildsBacks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BuildsBacks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the BuildsBack.
	 */
	long count(String query);


}


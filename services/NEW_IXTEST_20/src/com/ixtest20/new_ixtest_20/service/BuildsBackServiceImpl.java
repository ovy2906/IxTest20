/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.BuildsBack;


/**
 * ServiceImpl object for domain model class BuildsBack.
 *
 * @see BuildsBack
 */
@Service("NEW_IXTEST_20.BuildsBackService")
public class BuildsBackServiceImpl implements BuildsBackService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuildsBackServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.BuildsBackDao")
    private WMGenericDao<BuildsBack, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BuildsBack, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public BuildsBack create(BuildsBack buildsBack) {
        LOGGER.debug("Creating a new BuildsBack with information: {}", buildsBack);
        BuildsBack buildsBackCreated = this.wmGenericDao.create(buildsBack);
        return buildsBackCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public BuildsBack getById(BigInteger buildsbackId) throws EntityNotFoundException {
        LOGGER.debug("Finding BuildsBack by id: {}", buildsbackId);
        BuildsBack buildsBack = this.wmGenericDao.findById(buildsbackId);
        if (buildsBack == null){
            LOGGER.debug("No BuildsBack found with id: {}", buildsbackId);
            throw new EntityNotFoundException(String.valueOf(buildsbackId));
        }
        return buildsBack;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public BuildsBack findById(BigInteger buildsbackId) {
        LOGGER.debug("Finding BuildsBack by id: {}", buildsbackId);
        return this.wmGenericDao.findById(buildsbackId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public BuildsBack update(BuildsBack buildsBack) throws EntityNotFoundException {
        LOGGER.debug("Updating BuildsBack with information: {}", buildsBack);
        this.wmGenericDao.update(buildsBack);

        BigInteger buildsbackId = buildsBack.getBuildid();

        return this.wmGenericDao.findById(buildsbackId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public BuildsBack delete(BigInteger buildsbackId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BuildsBack with id: {}", buildsbackId);
        BuildsBack deleted = this.wmGenericDao.findById(buildsbackId);
        if (deleted == null) {
            LOGGER.debug("No BuildsBack found with id: {}", buildsbackId);
            throw new EntityNotFoundException(String.valueOf(buildsbackId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<BuildsBack> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BuildsBacks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<BuildsBack> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BuildsBacks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table BuildsBack to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


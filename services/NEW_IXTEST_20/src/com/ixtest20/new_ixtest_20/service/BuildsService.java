/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Builds;

/**
 * Service object for domain model class {@link Builds}.
 */
public interface BuildsService {

    /**
     * Creates a new Builds. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Builds if any.
     *
     * @param builds Details of the Builds to be created; value cannot be null.
     * @return The newly created Builds.
     */
	Builds create(Builds builds);


	/**
	 * Returns Builds by given id if exists.
	 *
	 * @param buildsId The id of the Builds to get; value cannot be null.
	 * @return Builds associated with the given buildsId.
     * @throws EntityNotFoundException If no Builds is found.
	 */
	Builds getById(BigInteger buildsId) throws EntityNotFoundException;

    /**
	 * Find and return the Builds by given id if exists, returns null otherwise.
	 *
	 * @param buildsId The id of the Builds to get; value cannot be null.
	 * @return Builds associated with the given buildsId.
	 */
	Builds findById(BigInteger buildsId);


	/**
	 * Updates the details of an existing Builds. It replaces all fields of the existing Builds with the given builds.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Builds if any.
     *
	 * @param builds The details of the Builds to be updated; value cannot be null.
	 * @return The updated Builds.
	 * @throws EntityNotFoundException if no Builds is found with given input.
	 */
	Builds update(Builds builds) throws EntityNotFoundException;

    /**
	 * Deletes an existing Builds with the given id.
	 *
	 * @param buildsId The id of the Builds to be deleted; value cannot be null.
	 * @return The deleted Builds.
	 * @throws EntityNotFoundException if no Builds found with the given id.
	 */
	Builds delete(BigInteger buildsId) throws EntityNotFoundException;

	/**
	 * Find all Builds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Builds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Builds> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Builds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Builds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Builds> findAll(String query, Pageable pageable);

    /**
	 * Exports all Builds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Builds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Builds.
	 */
	long count(String query);


}


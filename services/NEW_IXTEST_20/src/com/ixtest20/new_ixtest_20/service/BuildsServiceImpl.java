/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Builds;


/**
 * ServiceImpl object for domain model class Builds.
 *
 * @see Builds
 */
@Service("NEW_IXTEST_20.BuildsService")
public class BuildsServiceImpl implements BuildsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuildsServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.BuildsDao")
    private WMGenericDao<Builds, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Builds, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Builds create(Builds builds) {
        LOGGER.debug("Creating a new Builds with information: {}", builds);
        Builds buildsCreated = this.wmGenericDao.create(builds);
        return buildsCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds getById(BigInteger buildsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Builds by id: {}", buildsId);
        Builds builds = this.wmGenericDao.findById(buildsId);
        if (builds == null){
            LOGGER.debug("No Builds found with id: {}", buildsId);
            throw new EntityNotFoundException(String.valueOf(buildsId));
        }
        return builds;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds findById(BigInteger buildsId) {
        LOGGER.debug("Finding Builds by id: {}", buildsId);
        return this.wmGenericDao.findById(buildsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds update(Builds builds) throws EntityNotFoundException {
        LOGGER.debug("Updating Builds with information: {}", builds);
        this.wmGenericDao.update(builds);

        BigInteger buildsId = builds.getBuildid();

        return this.wmGenericDao.findById(buildsId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds delete(BigInteger buildsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Builds with id: {}", buildsId);
        Builds deleted = this.wmGenericDao.findById(buildsId);
        if (deleted == null) {
            LOGGER.debug("No Builds found with id: {}", buildsId);
            throw new EntityNotFoundException(String.valueOf(buildsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Builds> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Builds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Builds> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Builds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Builds to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Builds;
import com.ixtest20.new_ixtest_20.Engines;
import com.ixtest20.new_ixtest_20.IopBuildApps;
import com.ixtest20.new_ixtest_20.IopSuite;
import com.ixtest20.new_ixtest_20.Testcaserun;


/**
 * ServiceImpl object for domain model class Builds.
 *
 * @see Builds
 */
@Service("NEW_IXTEST_20.BuildsService")
public class BuildsServiceImpl implements BuildsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuildsServiceImpl.class);

    @Autowired
	@Qualifier("NEW_IXTEST_20.IopBuildAppsService")
	private IopBuildAppsService iopBuildAppsService;

    @Autowired
	@Qualifier("NEW_IXTEST_20.TestcaserunService")
	private TestcaserunService testcaserunService;

    @Autowired
	@Qualifier("NEW_IXTEST_20.EnginesService")
	private EnginesService enginesService;

    @Autowired
	@Qualifier("NEW_IXTEST_20.IopSuiteService")
	private IopSuiteService iopSuiteService;

    @Autowired
    @Qualifier("NEW_IXTEST_20.BuildsDao")
    private WMGenericDao<Builds, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Builds, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Builds create(Builds builds) {
        LOGGER.debug("Creating a new Builds with information: {}", builds);
        Builds buildsCreated = this.wmGenericDao.create(builds);
        if(buildsCreated.getEngineses() != null) {
            for(Engines enginese : buildsCreated.getEngineses()) {
                enginese.setBuilds(buildsCreated);
                LOGGER.debug("Creating a new child Engines with information: {}", enginese);
                enginesService.create(enginese);
            }
        }

        if(buildsCreated.getIopBuildAppses() != null) {
            for(IopBuildApps iopBuildAppse : buildsCreated.getIopBuildAppses()) {
                iopBuildAppse.setBuilds(buildsCreated);
                LOGGER.debug("Creating a new child IopBuildApps with information: {}", iopBuildAppse);
                iopBuildAppsService.create(iopBuildAppse);
            }
        }

        if(buildsCreated.getIopSuites() != null) {
            for(IopSuite iopSuite : buildsCreated.getIopSuites()) {
                iopSuite.setBuilds(buildsCreated);
                LOGGER.debug("Creating a new child IopSuite with information: {}", iopSuite);
                iopSuiteService.create(iopSuite);
            }
        }

        if(buildsCreated.getTestcaseruns() != null) {
            for(Testcaserun testcaserun : buildsCreated.getTestcaseruns()) {
                testcaserun.setBuilds(buildsCreated);
                LOGGER.debug("Creating a new child Testcaserun with information: {}", testcaserun);
                testcaserunService.create(testcaserun);
            }
        }
        return buildsCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds getById(BigInteger buildsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Builds by id: {}", buildsId);
        Builds builds = this.wmGenericDao.findById(buildsId);
        if (builds == null){
            LOGGER.debug("No Builds found with id: {}", buildsId);
            throw new EntityNotFoundException(String.valueOf(buildsId));
        }
        return builds;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds findById(BigInteger buildsId) {
        LOGGER.debug("Finding Builds by id: {}", buildsId);
        return this.wmGenericDao.findById(buildsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds update(Builds builds) throws EntityNotFoundException {
        LOGGER.debug("Updating Builds with information: {}", builds);
        this.wmGenericDao.update(builds);

        BigInteger buildsId = builds.getBuildid();

        return this.wmGenericDao.findById(buildsId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Builds delete(BigInteger buildsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Builds with id: {}", buildsId);
        Builds deleted = this.wmGenericDao.findById(buildsId);
        if (deleted == null) {
            LOGGER.debug("No Builds found with id: {}", buildsId);
            throw new EntityNotFoundException(String.valueOf(buildsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Builds> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Builds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Builds> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Builds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Builds to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Engines> findAssociatedEngineses(BigInteger buildid, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("builds.buildid = '" + buildid + "'");

        return enginesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<IopBuildApps> findAssociatedIopBuildAppses(BigInteger buildid, Pageable pageable) {
        LOGGER.debug("Fetching all associated iopBuildAppses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("builds.buildid = '" + buildid + "'");

        return iopBuildAppsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<IopSuite> findAssociatedIopSuites(BigInteger buildid, Pageable pageable) {
        LOGGER.debug("Fetching all associated iopSuites");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("builds.buildid = '" + buildid + "'");

        return iopSuiteService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Testcaserun> findAssociatedTestcaseruns(BigInteger buildid, Pageable pageable) {
        LOGGER.debug("Fetching all associated testcaseruns");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("builds.buildid = '" + buildid + "'");

        return testcaserunService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IopBuildAppsService instance
	 */
	protected void setIopBuildAppsService(IopBuildAppsService service) {
        this.iopBuildAppsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestcaserunService instance
	 */
	protected void setTestcaserunService(TestcaserunService service) {
        this.testcaserunService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EnginesService instance
	 */
	protected void setEnginesService(EnginesService service) {
        this.enginesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IopSuiteService instance
	 */
	protected void setIopSuiteService(IopSuiteService service) {
        this.iopSuiteService = service;
    }

}


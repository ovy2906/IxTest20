/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Chassis;
import com.ixtest20.new_ixtest_20.Network;


/**
 * ServiceImpl object for domain model class Chassis.
 *
 * @see Chassis
 */
@Service("NEW_IXTEST_20.ChassisService")
public class ChassisServiceImpl implements ChassisService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChassisServiceImpl.class);

    @Autowired
	@Qualifier("NEW_IXTEST_20.NetworkService")
	private NetworkService networkService;

    @Autowired
    @Qualifier("NEW_IXTEST_20.ChassisDao")
    private WMGenericDao<Chassis, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Chassis, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Chassis create(Chassis chassis) {
        LOGGER.debug("Creating a new Chassis with information: {}", chassis);
        Chassis chassisCreated = this.wmGenericDao.create(chassis);
        if(chassisCreated.getNetworks() != null) {
            for(Network network : chassisCreated.getNetworks()) {
                network.setChassis(chassisCreated);
                LOGGER.debug("Creating a new child Network with information: {}", network);
                networkService.create(network);
            }
        }
        return chassisCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Chassis getById(BigInteger chassisId) throws EntityNotFoundException {
        LOGGER.debug("Finding Chassis by id: {}", chassisId);
        Chassis chassis = this.wmGenericDao.findById(chassisId);
        if (chassis == null){
            LOGGER.debug("No Chassis found with id: {}", chassisId);
            throw new EntityNotFoundException(String.valueOf(chassisId));
        }
        return chassis;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Chassis findById(BigInteger chassisId) {
        LOGGER.debug("Finding Chassis by id: {}", chassisId);
        return this.wmGenericDao.findById(chassisId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Chassis update(Chassis chassis) throws EntityNotFoundException {
        LOGGER.debug("Updating Chassis with information: {}", chassis);
        this.wmGenericDao.update(chassis);

        BigInteger chassisId = chassis.getChassisid();

        return this.wmGenericDao.findById(chassisId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Chassis delete(BigInteger chassisId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Chassis with id: {}", chassisId);
        Chassis deleted = this.wmGenericDao.findById(chassisId);
        if (deleted == null) {
            LOGGER.debug("No Chassis found with id: {}", chassisId);
            throw new EntityNotFoundException(String.valueOf(chassisId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Chassis> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Chasses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Chassis> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Chasses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Chassis to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Network> findAssociatedNetworks(BigInteger chassisid, Pageable pageable) {
        LOGGER.debug("Fetching all associated networks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("chassis.chassisid = '" + chassisid + "'");

        return networkService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NetworkService instance
	 */
	protected void setNetworkService(NetworkService service) {
        this.networkService = service;
    }

}


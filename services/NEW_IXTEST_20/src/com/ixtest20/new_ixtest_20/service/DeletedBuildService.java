/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.DeletedBuild;

/**
 * Service object for domain model class {@link DeletedBuild}.
 */
public interface DeletedBuildService {

    /**
     * Creates a new DeletedBuild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DeletedBuild if any.
     *
     * @param deletedBuild Details of the DeletedBuild to be created; value cannot be null.
     * @return The newly created DeletedBuild.
     */
	DeletedBuild create(DeletedBuild deletedBuild);


	/**
	 * Returns DeletedBuild by given id if exists.
	 *
	 * @param deletedbuildId The id of the DeletedBuild to get; value cannot be null.
	 * @return DeletedBuild associated with the given deletedbuildId.
     * @throws EntityNotFoundException If no DeletedBuild is found.
	 */
	DeletedBuild getById(BigDecimal deletedbuildId) throws EntityNotFoundException;

    /**
	 * Find and return the DeletedBuild by given id if exists, returns null otherwise.
	 *
	 * @param deletedbuildId The id of the DeletedBuild to get; value cannot be null.
	 * @return DeletedBuild associated with the given deletedbuildId.
	 */
	DeletedBuild findById(BigDecimal deletedbuildId);


	/**
	 * Updates the details of an existing DeletedBuild. It replaces all fields of the existing DeletedBuild with the given deletedBuild.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on DeletedBuild if any.
     *
	 * @param deletedBuild The details of the DeletedBuild to be updated; value cannot be null.
	 * @return The updated DeletedBuild.
	 * @throws EntityNotFoundException if no DeletedBuild is found with given input.
	 */
	DeletedBuild update(DeletedBuild deletedBuild) throws EntityNotFoundException;

    /**
	 * Deletes an existing DeletedBuild with the given id.
	 *
	 * @param deletedbuildId The id of the DeletedBuild to be deleted; value cannot be null.
	 * @return The deleted DeletedBuild.
	 * @throws EntityNotFoundException if no DeletedBuild found with the given id.
	 */
	DeletedBuild delete(BigDecimal deletedbuildId) throws EntityNotFoundException;

	/**
	 * Find all DeletedBuilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DeletedBuilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<DeletedBuild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all DeletedBuilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DeletedBuilds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<DeletedBuild> findAll(String query, Pageable pageable);

    /**
	 * Exports all DeletedBuilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the DeletedBuilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the DeletedBuild.
	 */
	long count(String query);


}


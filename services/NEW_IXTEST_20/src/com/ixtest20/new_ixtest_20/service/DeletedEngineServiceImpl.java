/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.DeletedEngine;


/**
 * ServiceImpl object for domain model class DeletedEngine.
 *
 * @see DeletedEngine
 */
@Service("NEW_IXTEST_20.DeletedEngineService")
public class DeletedEngineServiceImpl implements DeletedEngineService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeletedEngineServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.DeletedEngineDao")
    private WMGenericDao<DeletedEngine, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DeletedEngine, BigDecimal> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public DeletedEngine create(DeletedEngine deletedEngine) {
        LOGGER.debug("Creating a new DeletedEngine with information: {}", deletedEngine);
        DeletedEngine deletedEngineCreated = this.wmGenericDao.create(deletedEngine);
        return deletedEngineCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletedEngine getById(BigDecimal deletedengineId) throws EntityNotFoundException {
        LOGGER.debug("Finding DeletedEngine by id: {}", deletedengineId);
        DeletedEngine deletedEngine = this.wmGenericDao.findById(deletedengineId);
        if (deletedEngine == null){
            LOGGER.debug("No DeletedEngine found with id: {}", deletedengineId);
            throw new EntityNotFoundException(String.valueOf(deletedengineId));
        }
        return deletedEngine;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletedEngine findById(BigDecimal deletedengineId) {
        LOGGER.debug("Finding DeletedEngine by id: {}", deletedengineId);
        return this.wmGenericDao.findById(deletedengineId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletedEngine update(DeletedEngine deletedEngine) throws EntityNotFoundException {
        LOGGER.debug("Updating DeletedEngine with information: {}", deletedEngine);
        this.wmGenericDao.update(deletedEngine);

        BigDecimal deletedengineId = deletedEngine.getIdDeletedEngine();

        return this.wmGenericDao.findById(deletedengineId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletedEngine delete(BigDecimal deletedengineId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeletedEngine with id: {}", deletedengineId);
        DeletedEngine deleted = this.wmGenericDao.findById(deletedengineId);
        if (deleted == null) {
            LOGGER.debug("No DeletedEngine found with id: {}", deletedengineId);
            throw new EntityNotFoundException(String.valueOf(deletedengineId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<DeletedEngine> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DeletedEngines");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<DeletedEngine> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DeletedEngines");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table DeletedEngine to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


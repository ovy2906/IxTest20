/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.DeletionStatus;


/**
 * ServiceImpl object for domain model class DeletionStatus.
 *
 * @see DeletionStatus
 */
@Service("NEW_IXTEST_20.DeletionStatusService")
public class DeletionStatusServiceImpl implements DeletionStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeletionStatusServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.DeletionStatusDao")
    private WMGenericDao<DeletionStatus, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DeletionStatus, BigDecimal> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public DeletionStatus create(DeletionStatus deletionStatus) {
        LOGGER.debug("Creating a new DeletionStatus with information: {}", deletionStatus);
        DeletionStatus deletionStatusCreated = this.wmGenericDao.create(deletionStatus);
        return deletionStatusCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletionStatus getById(BigDecimal deletionstatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding DeletionStatus by id: {}", deletionstatusId);
        DeletionStatus deletionStatus = this.wmGenericDao.findById(deletionstatusId);
        if (deletionStatus == null){
            LOGGER.debug("No DeletionStatus found with id: {}", deletionstatusId);
            throw new EntityNotFoundException(String.valueOf(deletionstatusId));
        }
        return deletionStatus;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletionStatus findById(BigDecimal deletionstatusId) {
        LOGGER.debug("Finding DeletionStatus by id: {}", deletionstatusId);
        return this.wmGenericDao.findById(deletionstatusId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletionStatus update(DeletionStatus deletionStatus) throws EntityNotFoundException {
        LOGGER.debug("Updating DeletionStatus with information: {}", deletionStatus);
        this.wmGenericDao.update(deletionStatus);

        BigDecimal deletionstatusId = deletionStatus.getStatusId();

        return this.wmGenericDao.findById(deletionstatusId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DeletionStatus delete(BigDecimal deletionstatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeletionStatus with id: {}", deletionstatusId);
        DeletionStatus deleted = this.wmGenericDao.findById(deletionstatusId);
        if (deleted == null) {
            LOGGER.debug("No DeletionStatus found with id: {}", deletionstatusId);
            throw new EntityNotFoundException(String.valueOf(deletionstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<DeletionStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DeletionStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<DeletionStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DeletionStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table DeletionStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


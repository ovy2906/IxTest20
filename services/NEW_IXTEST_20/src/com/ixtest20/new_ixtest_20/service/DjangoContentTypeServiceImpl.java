/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.DjangoContentType;


/**
 * ServiceImpl object for domain model class DjangoContentType.
 *
 * @see DjangoContentType
 */
@Service("NEW_IXTEST_20.DjangoContentTypeService")
public class DjangoContentTypeServiceImpl implements DjangoContentTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DjangoContentTypeServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.DjangoContentTypeDao")
    private WMGenericDao<DjangoContentType, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DjangoContentType, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public DjangoContentType create(DjangoContentType djangoContentType) {
        LOGGER.debug("Creating a new DjangoContentType with information: {}", djangoContentType);
        DjangoContentType djangoContentTypeCreated = this.wmGenericDao.create(djangoContentType);
        return djangoContentTypeCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoContentType getById(BigInteger djangocontenttypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding DjangoContentType by id: {}", djangocontenttypeId);
        DjangoContentType djangoContentType = this.wmGenericDao.findById(djangocontenttypeId);
        if (djangoContentType == null){
            LOGGER.debug("No DjangoContentType found with id: {}", djangocontenttypeId);
            throw new EntityNotFoundException(String.valueOf(djangocontenttypeId));
        }
        return djangoContentType;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoContentType findById(BigInteger djangocontenttypeId) {
        LOGGER.debug("Finding DjangoContentType by id: {}", djangocontenttypeId);
        return this.wmGenericDao.findById(djangocontenttypeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoContentType update(DjangoContentType djangoContentType) throws EntityNotFoundException {
        LOGGER.debug("Updating DjangoContentType with information: {}", djangoContentType);
        this.wmGenericDao.update(djangoContentType);

        BigInteger djangocontenttypeId = djangoContentType.getId();

        return this.wmGenericDao.findById(djangocontenttypeId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoContentType delete(BigInteger djangocontenttypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DjangoContentType with id: {}", djangocontenttypeId);
        DjangoContentType deleted = this.wmGenericDao.findById(djangocontenttypeId);
        if (deleted == null) {
            LOGGER.debug("No DjangoContentType found with id: {}", djangocontenttypeId);
            throw new EntityNotFoundException(String.valueOf(djangocontenttypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<DjangoContentType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DjangoContentTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<DjangoContentType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DjangoContentTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table DjangoContentType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


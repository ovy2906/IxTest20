/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.DjangoSite;

/**
 * Service object for domain model class {@link DjangoSite}.
 */
public interface DjangoSiteService {

    /**
     * Creates a new DjangoSite. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DjangoSite if any.
     *
     * @param djangoSite Details of the DjangoSite to be created; value cannot be null.
     * @return The newly created DjangoSite.
     */
	DjangoSite create(DjangoSite djangoSite);


	/**
	 * Returns DjangoSite by given id if exists.
	 *
	 * @param djangositeId The id of the DjangoSite to get; value cannot be null.
	 * @return DjangoSite associated with the given djangositeId.
     * @throws EntityNotFoundException If no DjangoSite is found.
	 */
	DjangoSite getById(BigInteger djangositeId) throws EntityNotFoundException;

    /**
	 * Find and return the DjangoSite by given id if exists, returns null otherwise.
	 *
	 * @param djangositeId The id of the DjangoSite to get; value cannot be null.
	 * @return DjangoSite associated with the given djangositeId.
	 */
	DjangoSite findById(BigInteger djangositeId);


	/**
	 * Updates the details of an existing DjangoSite. It replaces all fields of the existing DjangoSite with the given djangoSite.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on DjangoSite if any.
     *
	 * @param djangoSite The details of the DjangoSite to be updated; value cannot be null.
	 * @return The updated DjangoSite.
	 * @throws EntityNotFoundException if no DjangoSite is found with given input.
	 */
	DjangoSite update(DjangoSite djangoSite) throws EntityNotFoundException;

    /**
	 * Deletes an existing DjangoSite with the given id.
	 *
	 * @param djangositeId The id of the DjangoSite to be deleted; value cannot be null.
	 * @return The deleted DjangoSite.
	 * @throws EntityNotFoundException if no DjangoSite found with the given id.
	 */
	DjangoSite delete(BigInteger djangositeId) throws EntityNotFoundException;

	/**
	 * Find all DjangoSites matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DjangoSites.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<DjangoSite> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all DjangoSites matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DjangoSites.
     *
     * @see Pageable
     * @see Page
	 */
    Page<DjangoSite> findAll(String query, Pageable pageable);

    /**
	 * Exports all DjangoSites matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the DjangoSites in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the DjangoSite.
	 */
	long count(String query);


}


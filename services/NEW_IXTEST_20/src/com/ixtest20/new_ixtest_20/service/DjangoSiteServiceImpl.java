/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.DjangoSite;


/**
 * ServiceImpl object for domain model class DjangoSite.
 *
 * @see DjangoSite
 */
@Service("NEW_IXTEST_20.DjangoSiteService")
public class DjangoSiteServiceImpl implements DjangoSiteService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DjangoSiteServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.DjangoSiteDao")
    private WMGenericDao<DjangoSite, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DjangoSite, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public DjangoSite create(DjangoSite djangoSite) {
        LOGGER.debug("Creating a new DjangoSite with information: {}", djangoSite);
        DjangoSite djangoSiteCreated = this.wmGenericDao.create(djangoSite);
        return djangoSiteCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoSite getById(BigInteger djangositeId) throws EntityNotFoundException {
        LOGGER.debug("Finding DjangoSite by id: {}", djangositeId);
        DjangoSite djangoSite = this.wmGenericDao.findById(djangositeId);
        if (djangoSite == null){
            LOGGER.debug("No DjangoSite found with id: {}", djangositeId);
            throw new EntityNotFoundException(String.valueOf(djangositeId));
        }
        return djangoSite;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoSite findById(BigInteger djangositeId) {
        LOGGER.debug("Finding DjangoSite by id: {}", djangositeId);
        return this.wmGenericDao.findById(djangositeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoSite update(DjangoSite djangoSite) throws EntityNotFoundException {
        LOGGER.debug("Updating DjangoSite with information: {}", djangoSite);
        this.wmGenericDao.update(djangoSite);

        BigInteger djangositeId = djangoSite.getId();

        return this.wmGenericDao.findById(djangositeId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public DjangoSite delete(BigInteger djangositeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DjangoSite with id: {}", djangositeId);
        DjangoSite deleted = this.wmGenericDao.findById(djangositeId);
        if (deleted == null) {
            LOGGER.debug("No DjangoSite found with id: {}", djangositeId);
            throw new EntityNotFoundException(String.valueOf(djangositeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<DjangoSite> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DjangoSites");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<DjangoSite> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DjangoSites");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table DjangoSite to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Dut;

/**
 * Service object for domain model class {@link Dut}.
 */
public interface DutService {

    /**
     * Creates a new Dut. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Dut if any.
     *
     * @param dut Details of the Dut to be created; value cannot be null.
     * @return The newly created Dut.
     */
	Dut create(Dut dut);


	/**
	 * Returns Dut by given id if exists.
	 *
	 * @param dutId The id of the Dut to get; value cannot be null.
	 * @return Dut associated with the given dutId.
     * @throws EntityNotFoundException If no Dut is found.
	 */
	Dut getById(BigInteger dutId) throws EntityNotFoundException;

    /**
	 * Find and return the Dut by given id if exists, returns null otherwise.
	 *
	 * @param dutId The id of the Dut to get; value cannot be null.
	 * @return Dut associated with the given dutId.
	 */
	Dut findById(BigInteger dutId);


	/**
	 * Updates the details of an existing Dut. It replaces all fields of the existing Dut with the given dut.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Dut if any.
     *
	 * @param dut The details of the Dut to be updated; value cannot be null.
	 * @return The updated Dut.
	 * @throws EntityNotFoundException if no Dut is found with given input.
	 */
	Dut update(Dut dut) throws EntityNotFoundException;

    /**
	 * Deletes an existing Dut with the given id.
	 *
	 * @param dutId The id of the Dut to be deleted; value cannot be null.
	 * @return The deleted Dut.
	 * @throws EntityNotFoundException if no Dut found with the given id.
	 */
	Dut delete(BigInteger dutId) throws EntityNotFoundException;

	/**
	 * Find all Duts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Duts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Dut> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Duts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Duts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Dut> findAll(String query, Pageable pageable);

    /**
	 * Exports all Duts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Duts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Dut.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Dut;
import com.ixtest20.new_ixtest_20.PDutRun;


/**
 * ServiceImpl object for domain model class Dut.
 *
 * @see Dut
 */
@Service("NEW_IXTEST_20.DutService")
public class DutServiceImpl implements DutService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DutServiceImpl.class);

    @Autowired
	@Qualifier("NEW_IXTEST_20.PDutRunService")
	private PDutRunService pDutRunService;

    @Autowired
    @Qualifier("NEW_IXTEST_20.DutDao")
    private WMGenericDao<Dut, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Dut, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Dut create(Dut dut) {
        LOGGER.debug("Creating a new Dut with information: {}", dut);
        Dut dutCreated = this.wmGenericDao.create(dut);
        if(dutCreated.getPdutRuns() != null) {
            for(PDutRun pdutRun : dutCreated.getPdutRuns()) {
                pdutRun.setDut(dutCreated);
                LOGGER.debug("Creating a new child PDutRun with information: {}", pdutRun);
                pDutRunService.create(pdutRun);
            }
        }
        return dutCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Dut getById(BigInteger dutId) throws EntityNotFoundException {
        LOGGER.debug("Finding Dut by id: {}", dutId);
        Dut dut = this.wmGenericDao.findById(dutId);
        if (dut == null){
            LOGGER.debug("No Dut found with id: {}", dutId);
            throw new EntityNotFoundException(String.valueOf(dutId));
        }
        return dut;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Dut findById(BigInteger dutId) {
        LOGGER.debug("Finding Dut by id: {}", dutId);
        return this.wmGenericDao.findById(dutId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Dut update(Dut dut) throws EntityNotFoundException {
        LOGGER.debug("Updating Dut with information: {}", dut);
        this.wmGenericDao.update(dut);

        BigInteger dutId = dut.getDutid();

        return this.wmGenericDao.findById(dutId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Dut delete(BigInteger dutId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Dut with id: {}", dutId);
        Dut deleted = this.wmGenericDao.findById(dutId);
        if (deleted == null) {
            LOGGER.debug("No Dut found with id: {}", dutId);
            throw new EntityNotFoundException(String.valueOf(dutId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Dut> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Duts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Dut> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Duts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Dut to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<PDutRun> findAssociatedPdutRuns(BigInteger dutid, Pageable pageable) {
        LOGGER.debug("Fetching all associated pdutRuns");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("dut.dutid = '" + dutid + "'");

        return pDutRunService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PDutRunService instance
	 */
	protected void setPDutRunService(PDutRunService service) {
        this.pDutRunService = service;
    }

}


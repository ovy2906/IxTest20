/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.EnginesBack97;


/**
 * ServiceImpl object for domain model class EnginesBack97.
 *
 * @see EnginesBack97
 */
@Service("NEW_IXTEST_20.EnginesBack97Service")
public class EnginesBack97ServiceImpl implements EnginesBack97Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(EnginesBack97ServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.EnginesBack97Dao")
    private WMGenericDao<EnginesBack97, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EnginesBack97, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public EnginesBack97 create(EnginesBack97 enginesBack97) {
        LOGGER.debug("Creating a new EnginesBack97 with information: {}", enginesBack97);
        EnginesBack97 enginesBack97Created = this.wmGenericDao.create(enginesBack97);
        return enginesBack97Created;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public EnginesBack97 getById(BigInteger enginesback97Id) throws EntityNotFoundException {
        LOGGER.debug("Finding EnginesBack97 by id: {}", enginesback97Id);
        EnginesBack97 enginesBack97 = this.wmGenericDao.findById(enginesback97Id);
        if (enginesBack97 == null){
            LOGGER.debug("No EnginesBack97 found with id: {}", enginesback97Id);
            throw new EntityNotFoundException(String.valueOf(enginesback97Id));
        }
        return enginesBack97;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public EnginesBack97 findById(BigInteger enginesback97Id) {
        LOGGER.debug("Finding EnginesBack97 by id: {}", enginesback97Id);
        return this.wmGenericDao.findById(enginesback97Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public EnginesBack97 update(EnginesBack97 enginesBack97) throws EntityNotFoundException {
        LOGGER.debug("Updating EnginesBack97 with information: {}", enginesBack97);
        this.wmGenericDao.update(enginesBack97);

        BigInteger enginesback97Id = enginesBack97.getEngineid();

        return this.wmGenericDao.findById(enginesback97Id);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public EnginesBack97 delete(BigInteger enginesback97Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EnginesBack97 with id: {}", enginesback97Id);
        EnginesBack97 deleted = this.wmGenericDao.findById(enginesback97Id);
        if (deleted == null) {
            LOGGER.debug("No EnginesBack97 found with id: {}", enginesback97Id);
            throw new EntityNotFoundException(String.valueOf(enginesback97Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<EnginesBack97> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EnginesBack97s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<EnginesBack97> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EnginesBack97s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table EnginesBack97 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


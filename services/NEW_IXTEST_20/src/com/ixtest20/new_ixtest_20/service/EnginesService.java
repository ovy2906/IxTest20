/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Engines;
import com.ixtest20.new_ixtest_20.IopEnginesDetails;
import com.ixtest20.new_ixtest_20.Testcaserun;
import com.ixtest20.new_ixtest_20.Testcases;

/**
 * Service object for domain model class {@link Engines}.
 */
public interface EnginesService {

    /**
     * Creates a new Engines. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Engines if any.
     *
     * @param engines Details of the Engines to be created; value cannot be null.
     * @return The newly created Engines.
     */
	Engines create(Engines engines);


	/**
	 * Returns Engines by given id if exists.
	 *
	 * @param enginesId The id of the Engines to get; value cannot be null.
	 * @return Engines associated with the given enginesId.
     * @throws EntityNotFoundException If no Engines is found.
	 */
	Engines getById(BigInteger enginesId) throws EntityNotFoundException;

    /**
	 * Find and return the Engines by given id if exists, returns null otherwise.
	 *
	 * @param enginesId The id of the Engines to get; value cannot be null.
	 * @return Engines associated with the given enginesId.
	 */
	Engines findById(BigInteger enginesId);


	/**
	 * Updates the details of an existing Engines. It replaces all fields of the existing Engines with the given engines.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Engines if any.
     *
	 * @param engines The details of the Engines to be updated; value cannot be null.
	 * @return The updated Engines.
	 * @throws EntityNotFoundException if no Engines is found with given input.
	 */
	Engines update(Engines engines) throws EntityNotFoundException;

    /**
	 * Deletes an existing Engines with the given id.
	 *
	 * @param enginesId The id of the Engines to be deleted; value cannot be null.
	 * @return The deleted Engines.
	 * @throws EntityNotFoundException if no Engines found with the given id.
	 */
	Engines delete(BigInteger enginesId) throws EntityNotFoundException;

	/**
	 * Find all Engines matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Engines.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Engines> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Engines matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Engines.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Engines> findAll(String query, Pageable pageable);

    /**
	 * Exports all Engines matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Engines in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Engines.
	 */
	long count(String query);

    /*
     * Returns the associated iopEnginesDetailses for given Engines id.
     *
     * @param engineid value of engineid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated IopEnginesDetails instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<IopEnginesDetails> findAssociatedIopEnginesDetailses(BigInteger engineid, Pageable pageable);

    /*
     * Returns the associated testcaseruns for given Engines id.
     *
     * @param engineid value of engineid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Testcaserun instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Testcaserun> findAssociatedTestcaseruns(BigInteger engineid, Pageable pageable);

    /*
     * Returns the associated testcaseses for given Engines id.
     *
     * @param engineid value of engineid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Testcases instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Testcases> findAssociatedTestcaseses(BigInteger engineid, Pageable pageable);

}


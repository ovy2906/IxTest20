/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Engines;


/**
 * ServiceImpl object for domain model class Engines.
 *
 * @see Engines
 */
@Service("NEW_IXTEST_20.EnginesService")
public class EnginesServiceImpl implements EnginesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EnginesServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.EnginesDao")
    private WMGenericDao<Engines, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Engines, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Engines create(Engines engines) {
        LOGGER.debug("Creating a new Engines with information: {}", engines);
        Engines enginesCreated = this.wmGenericDao.create(engines);
        return enginesCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Engines getById(BigInteger enginesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Engines by id: {}", enginesId);
        Engines engines = this.wmGenericDao.findById(enginesId);
        if (engines == null){
            LOGGER.debug("No Engines found with id: {}", enginesId);
            throw new EntityNotFoundException(String.valueOf(enginesId));
        }
        return engines;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Engines findById(BigInteger enginesId) {
        LOGGER.debug("Finding Engines by id: {}", enginesId);
        return this.wmGenericDao.findById(enginesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Engines update(Engines engines) throws EntityNotFoundException {
        LOGGER.debug("Updating Engines with information: {}", engines);
        this.wmGenericDao.update(engines);

        BigInteger enginesId = engines.getEngineid();

        return this.wmGenericDao.findById(enginesId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Engines delete(BigInteger enginesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Engines with id: {}", enginesId);
        Engines deleted = this.wmGenericDao.findById(enginesId);
        if (deleted == null) {
            LOGGER.debug("No Engines found with id: {}", enginesId);
            throw new EntityNotFoundException(String.valueOf(enginesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Engines> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Engines");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Engines> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Engines");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Engines to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


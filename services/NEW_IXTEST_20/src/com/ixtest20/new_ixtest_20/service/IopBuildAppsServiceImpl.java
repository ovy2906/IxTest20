/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.IopBuildApps;


/**
 * ServiceImpl object for domain model class IopBuildApps.
 *
 * @see IopBuildApps
 */
@Service("NEW_IXTEST_20.IopBuildAppsService")
public class IopBuildAppsServiceImpl implements IopBuildAppsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IopBuildAppsServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.IopBuildAppsDao")
    private WMGenericDao<IopBuildApps, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IopBuildApps, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public IopBuildApps create(IopBuildApps iopBuildApps) {
        LOGGER.debug("Creating a new IopBuildApps with information: {}", iopBuildApps);
        IopBuildApps iopBuildAppsCreated = this.wmGenericDao.create(iopBuildApps);
        return iopBuildAppsCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopBuildApps getById(BigInteger iopbuildappsId) throws EntityNotFoundException {
        LOGGER.debug("Finding IopBuildApps by id: {}", iopbuildappsId);
        IopBuildApps iopBuildApps = this.wmGenericDao.findById(iopbuildappsId);
        if (iopBuildApps == null){
            LOGGER.debug("No IopBuildApps found with id: {}", iopbuildappsId);
            throw new EntityNotFoundException(String.valueOf(iopbuildappsId));
        }
        return iopBuildApps;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopBuildApps findById(BigInteger iopbuildappsId) {
        LOGGER.debug("Finding IopBuildApps by id: {}", iopbuildappsId);
        return this.wmGenericDao.findById(iopbuildappsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopBuildApps update(IopBuildApps iopBuildApps) throws EntityNotFoundException {
        LOGGER.debug("Updating IopBuildApps with information: {}", iopBuildApps);
        this.wmGenericDao.update(iopBuildApps);

        BigInteger iopbuildappsId = iopBuildApps.getIopBuildAppsId();

        return this.wmGenericDao.findById(iopbuildappsId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopBuildApps delete(BigInteger iopbuildappsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting IopBuildApps with id: {}", iopbuildappsId);
        IopBuildApps deleted = this.wmGenericDao.findById(iopbuildappsId);
        if (deleted == null) {
            LOGGER.debug("No IopBuildApps found with id: {}", iopbuildappsId);
            throw new EntityNotFoundException(String.valueOf(iopbuildappsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<IopBuildApps> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IopBuildApps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<IopBuildApps> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IopBuildApps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table IopBuildApps to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


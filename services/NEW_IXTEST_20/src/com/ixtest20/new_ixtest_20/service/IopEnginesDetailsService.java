/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.IopEnginesDetails;

/**
 * Service object for domain model class {@link IopEnginesDetails}.
 */
public interface IopEnginesDetailsService {

    /**
     * Creates a new IopEnginesDetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IopEnginesDetails if any.
     *
     * @param iopEnginesDetails Details of the IopEnginesDetails to be created; value cannot be null.
     * @return The newly created IopEnginesDetails.
     */
	IopEnginesDetails create(IopEnginesDetails iopEnginesDetails);


	/**
	 * Returns IopEnginesDetails by given id if exists.
	 *
	 * @param iopenginesdetailsId The id of the IopEnginesDetails to get; value cannot be null.
	 * @return IopEnginesDetails associated with the given iopenginesdetailsId.
     * @throws EntityNotFoundException If no IopEnginesDetails is found.
	 */
	IopEnginesDetails getById(BigInteger iopenginesdetailsId) throws EntityNotFoundException;

    /**
	 * Find and return the IopEnginesDetails by given id if exists, returns null otherwise.
	 *
	 * @param iopenginesdetailsId The id of the IopEnginesDetails to get; value cannot be null.
	 * @return IopEnginesDetails associated with the given iopenginesdetailsId.
	 */
	IopEnginesDetails findById(BigInteger iopenginesdetailsId);


	/**
	 * Updates the details of an existing IopEnginesDetails. It replaces all fields of the existing IopEnginesDetails with the given iopEnginesDetails.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on IopEnginesDetails if any.
     *
	 * @param iopEnginesDetails The details of the IopEnginesDetails to be updated; value cannot be null.
	 * @return The updated IopEnginesDetails.
	 * @throws EntityNotFoundException if no IopEnginesDetails is found with given input.
	 */
	IopEnginesDetails update(IopEnginesDetails iopEnginesDetails) throws EntityNotFoundException;

    /**
	 * Deletes an existing IopEnginesDetails with the given id.
	 *
	 * @param iopenginesdetailsId The id of the IopEnginesDetails to be deleted; value cannot be null.
	 * @return The deleted IopEnginesDetails.
	 * @throws EntityNotFoundException if no IopEnginesDetails found with the given id.
	 */
	IopEnginesDetails delete(BigInteger iopenginesdetailsId) throws EntityNotFoundException;

	/**
	 * Find all IopEnginesDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IopEnginesDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<IopEnginesDetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all IopEnginesDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IopEnginesDetails.
     *
     * @see Pageable
     * @see Page
	 */
    Page<IopEnginesDetails> findAll(String query, Pageable pageable);

    /**
	 * Exports all IopEnginesDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the IopEnginesDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the IopEnginesDetails.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.IopEnginesDetails;


/**
 * ServiceImpl object for domain model class IopEnginesDetails.
 *
 * @see IopEnginesDetails
 */
@Service("NEW_IXTEST_20.IopEnginesDetailsService")
public class IopEnginesDetailsServiceImpl implements IopEnginesDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IopEnginesDetailsServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.IopEnginesDetailsDao")
    private WMGenericDao<IopEnginesDetails, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IopEnginesDetails, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public IopEnginesDetails create(IopEnginesDetails iopEnginesDetails) {
        LOGGER.debug("Creating a new IopEnginesDetails with information: {}", iopEnginesDetails);
        IopEnginesDetails iopEnginesDetailsCreated = this.wmGenericDao.create(iopEnginesDetails);
        return iopEnginesDetailsCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopEnginesDetails getById(BigInteger iopenginesdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding IopEnginesDetails by id: {}", iopenginesdetailsId);
        IopEnginesDetails iopEnginesDetails = this.wmGenericDao.findById(iopenginesdetailsId);
        if (iopEnginesDetails == null){
            LOGGER.debug("No IopEnginesDetails found with id: {}", iopenginesdetailsId);
            throw new EntityNotFoundException(String.valueOf(iopenginesdetailsId));
        }
        return iopEnginesDetails;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopEnginesDetails findById(BigInteger iopenginesdetailsId) {
        LOGGER.debug("Finding IopEnginesDetails by id: {}", iopenginesdetailsId);
        return this.wmGenericDao.findById(iopenginesdetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopEnginesDetails update(IopEnginesDetails iopEnginesDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating IopEnginesDetails with information: {}", iopEnginesDetails);
        this.wmGenericDao.update(iopEnginesDetails);

        BigInteger iopenginesdetailsId = iopEnginesDetails.getIopEnginesDetailsId();

        return this.wmGenericDao.findById(iopenginesdetailsId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopEnginesDetails delete(BigInteger iopenginesdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting IopEnginesDetails with id: {}", iopenginesdetailsId);
        IopEnginesDetails deleted = this.wmGenericDao.findById(iopenginesdetailsId);
        if (deleted == null) {
            LOGGER.debug("No IopEnginesDetails found with id: {}", iopenginesdetailsId);
            throw new EntityNotFoundException(String.valueOf(iopenginesdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<IopEnginesDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IopEnginesDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<IopEnginesDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IopEnginesDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table IopEnginesDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Engines;
import com.ixtest20.new_ixtest_20.IopSuite;


/**
 * ServiceImpl object for domain model class IopSuite.
 *
 * @see IopSuite
 */
@Service("NEW_IXTEST_20.IopSuiteService")
public class IopSuiteServiceImpl implements IopSuiteService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IopSuiteServiceImpl.class);

    @Autowired
	@Qualifier("NEW_IXTEST_20.EnginesService")
	private EnginesService enginesService;

    @Autowired
    @Qualifier("NEW_IXTEST_20.IopSuiteDao")
    private WMGenericDao<IopSuite, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IopSuite, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public IopSuite create(IopSuite iopSuite) {
        LOGGER.debug("Creating a new IopSuite with information: {}", iopSuite);
        IopSuite iopSuiteCreated = this.wmGenericDao.create(iopSuite);
        if(iopSuiteCreated.getEngineses() != null) {
            for(Engines enginese : iopSuiteCreated.getEngineses()) {
                enginese.setIopSuite(iopSuiteCreated);
                LOGGER.debug("Creating a new child Engines with information: {}", enginese);
                enginesService.create(enginese);
            }
        }
        return iopSuiteCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopSuite getById(BigInteger iopsuiteId) throws EntityNotFoundException {
        LOGGER.debug("Finding IopSuite by id: {}", iopsuiteId);
        IopSuite iopSuite = this.wmGenericDao.findById(iopsuiteId);
        if (iopSuite == null){
            LOGGER.debug("No IopSuite found with id: {}", iopsuiteId);
            throw new EntityNotFoundException(String.valueOf(iopsuiteId));
        }
        return iopSuite;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopSuite findById(BigInteger iopsuiteId) {
        LOGGER.debug("Finding IopSuite by id: {}", iopsuiteId);
        return this.wmGenericDao.findById(iopsuiteId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopSuite update(IopSuite iopSuite) throws EntityNotFoundException {
        LOGGER.debug("Updating IopSuite with information: {}", iopSuite);
        this.wmGenericDao.update(iopSuite);

        BigInteger iopsuiteId = iopSuite.getIopSuiteId();

        return this.wmGenericDao.findById(iopsuiteId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public IopSuite delete(BigInteger iopsuiteId) throws EntityNotFoundException {
        LOGGER.debug("Deleting IopSuite with id: {}", iopsuiteId);
        IopSuite deleted = this.wmGenericDao.findById(iopsuiteId);
        if (deleted == null) {
            LOGGER.debug("No IopSuite found with id: {}", iopsuiteId);
            throw new EntityNotFoundException(String.valueOf(iopsuiteId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<IopSuite> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IopSuites");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<IopSuite> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IopSuites");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table IopSuite to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Engines> findAssociatedEngineses(BigInteger iopSuiteId, Pageable pageable) {
        LOGGER.debug("Fetching all associated engineses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("iopSuite.iopSuiteId = '" + iopSuiteId + "'");

        return enginesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EnginesService instance
	 */
	protected void setEnginesService(EnginesService service) {
        this.enginesService = service;
    }

}


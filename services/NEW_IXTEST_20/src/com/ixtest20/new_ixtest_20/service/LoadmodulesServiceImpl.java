/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Loadmodules;
import com.ixtest20.new_ixtest_20.Network;


/**
 * ServiceImpl object for domain model class Loadmodules.
 *
 * @see Loadmodules
 */
@Service("NEW_IXTEST_20.LoadmodulesService")
public class LoadmodulesServiceImpl implements LoadmodulesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoadmodulesServiceImpl.class);

    @Autowired
	@Qualifier("NEW_IXTEST_20.NetworkService")
	private NetworkService networkService;

    @Autowired
    @Qualifier("NEW_IXTEST_20.LoadmodulesDao")
    private WMGenericDao<Loadmodules, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Loadmodules, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Loadmodules create(Loadmodules loadmodules) {
        LOGGER.debug("Creating a new Loadmodules with information: {}", loadmodules);
        Loadmodules loadmodulesCreated = this.wmGenericDao.create(loadmodules);
        if(loadmodulesCreated.getNetworks() != null) {
            for(Network network : loadmodulesCreated.getNetworks()) {
                network.setLoadmodules(loadmodulesCreated);
                LOGGER.debug("Creating a new child Network with information: {}", network);
                networkService.create(network);
            }
        }
        return loadmodulesCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Loadmodules getById(BigInteger loadmodulesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Loadmodules by id: {}", loadmodulesId);
        Loadmodules loadmodules = this.wmGenericDao.findById(loadmodulesId);
        if (loadmodules == null){
            LOGGER.debug("No Loadmodules found with id: {}", loadmodulesId);
            throw new EntityNotFoundException(String.valueOf(loadmodulesId));
        }
        return loadmodules;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Loadmodules findById(BigInteger loadmodulesId) {
        LOGGER.debug("Finding Loadmodules by id: {}", loadmodulesId);
        return this.wmGenericDao.findById(loadmodulesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Loadmodules update(Loadmodules loadmodules) throws EntityNotFoundException {
        LOGGER.debug("Updating Loadmodules with information: {}", loadmodules);
        this.wmGenericDao.update(loadmodules);

        BigInteger loadmodulesId = loadmodules.getLmid();

        return this.wmGenericDao.findById(loadmodulesId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Loadmodules delete(BigInteger loadmodulesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Loadmodules with id: {}", loadmodulesId);
        Loadmodules deleted = this.wmGenericDao.findById(loadmodulesId);
        if (deleted == null) {
            LOGGER.debug("No Loadmodules found with id: {}", loadmodulesId);
            throw new EntityNotFoundException(String.valueOf(loadmodulesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Loadmodules> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Loadmodules");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Loadmodules> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Loadmodules");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Loadmodules to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Network> findAssociatedNetworks(BigInteger lmid, Pageable pageable) {
        LOGGER.debug("Fetching all associated networks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("loadmodules.lmid = '" + lmid + "'");

        return networkService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NetworkService instance
	 */
	protected void setNetworkService(NetworkService service) {
        this.networkService = service;
    }

}


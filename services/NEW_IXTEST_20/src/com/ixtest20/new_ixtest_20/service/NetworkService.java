/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Network;

/**
 * Service object for domain model class {@link Network}.
 */
public interface NetworkService {

    /**
     * Creates a new Network. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Network if any.
     *
     * @param network Details of the Network to be created; value cannot be null.
     * @return The newly created Network.
     */
	Network create(Network network);


	/**
	 * Returns Network by given id if exists.
	 *
	 * @param networkId The id of the Network to get; value cannot be null.
	 * @return Network associated with the given networkId.
     * @throws EntityNotFoundException If no Network is found.
	 */
	Network getById(BigInteger networkId) throws EntityNotFoundException;

    /**
	 * Find and return the Network by given id if exists, returns null otherwise.
	 *
	 * @param networkId The id of the Network to get; value cannot be null.
	 * @return Network associated with the given networkId.
	 */
	Network findById(BigInteger networkId);


	/**
	 * Updates the details of an existing Network. It replaces all fields of the existing Network with the given network.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Network if any.
     *
	 * @param network The details of the Network to be updated; value cannot be null.
	 * @return The updated Network.
	 * @throws EntityNotFoundException if no Network is found with given input.
	 */
	Network update(Network network) throws EntityNotFoundException;

    /**
	 * Deletes an existing Network with the given id.
	 *
	 * @param networkId The id of the Network to be deleted; value cannot be null.
	 * @return The deleted Network.
	 * @throws EntityNotFoundException if no Network found with the given id.
	 */
	Network delete(BigInteger networkId) throws EntityNotFoundException;

	/**
	 * Find all Networks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Networks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Network> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Networks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Networks.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Network> findAll(String query, Pageable pageable);

    /**
	 * Exports all Networks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Networks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Network.
	 */
	long count(String query);


}


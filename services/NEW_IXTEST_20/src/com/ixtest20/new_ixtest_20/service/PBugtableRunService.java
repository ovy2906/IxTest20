/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.PBugtableRun;

/**
 * Service object for domain model class {@link PBugtableRun}.
 */
public interface PBugtableRunService {

    /**
     * Creates a new PBugtableRun. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PBugtableRun if any.
     *
     * @param pbugtableRun Details of the PBugtableRun to be created; value cannot be null.
     * @return The newly created PBugtableRun.
     */
	PBugtableRun create(PBugtableRun pbugtableRun);


	/**
	 * Returns PBugtableRun by given id if exists.
	 *
	 * @param pbugtablerunId The id of the PBugtableRun to get; value cannot be null.
	 * @return PBugtableRun associated with the given pbugtablerunId.
     * @throws EntityNotFoundException If no PBugtableRun is found.
	 */
	PBugtableRun getById(BigInteger pbugtablerunId) throws EntityNotFoundException;

    /**
	 * Find and return the PBugtableRun by given id if exists, returns null otherwise.
	 *
	 * @param pbugtablerunId The id of the PBugtableRun to get; value cannot be null.
	 * @return PBugtableRun associated with the given pbugtablerunId.
	 */
	PBugtableRun findById(BigInteger pbugtablerunId);


	/**
	 * Updates the details of an existing PBugtableRun. It replaces all fields of the existing PBugtableRun with the given pbugtableRun.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PBugtableRun if any.
     *
	 * @param pbugtableRun The details of the PBugtableRun to be updated; value cannot be null.
	 * @return The updated PBugtableRun.
	 * @throws EntityNotFoundException if no PBugtableRun is found with given input.
	 */
	PBugtableRun update(PBugtableRun pbugtableRun) throws EntityNotFoundException;

    /**
	 * Deletes an existing PBugtableRun with the given id.
	 *
	 * @param pbugtablerunId The id of the PBugtableRun to be deleted; value cannot be null.
	 * @return The deleted PBugtableRun.
	 * @throws EntityNotFoundException if no PBugtableRun found with the given id.
	 */
	PBugtableRun delete(BigInteger pbugtablerunId) throws EntityNotFoundException;

	/**
	 * Find all PBugtableRuns matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PBugtableRuns.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PBugtableRun> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PBugtableRuns matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PBugtableRuns.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PBugtableRun> findAll(String query, Pageable pageable);

    /**
	 * Exports all PBugtableRuns matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PBugtableRuns in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PBugtableRun.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.PDutRun;

/**
 * Service object for domain model class {@link PDutRun}.
 */
public interface PDutRunService {

    /**
     * Creates a new PDutRun. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PDutRun if any.
     *
     * @param pdutRun Details of the PDutRun to be created; value cannot be null.
     * @return The newly created PDutRun.
     */
	PDutRun create(PDutRun pdutRun);


	/**
	 * Returns PDutRun by given id if exists.
	 *
	 * @param pdutrunId The id of the PDutRun to get; value cannot be null.
	 * @return PDutRun associated with the given pdutrunId.
     * @throws EntityNotFoundException If no PDutRun is found.
	 */
	PDutRun getById(BigInteger pdutrunId) throws EntityNotFoundException;

    /**
	 * Find and return the PDutRun by given id if exists, returns null otherwise.
	 *
	 * @param pdutrunId The id of the PDutRun to get; value cannot be null.
	 * @return PDutRun associated with the given pdutrunId.
	 */
	PDutRun findById(BigInteger pdutrunId);


	/**
	 * Updates the details of an existing PDutRun. It replaces all fields of the existing PDutRun with the given pdutRun.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PDutRun if any.
     *
	 * @param pdutRun The details of the PDutRun to be updated; value cannot be null.
	 * @return The updated PDutRun.
	 * @throws EntityNotFoundException if no PDutRun is found with given input.
	 */
	PDutRun update(PDutRun pdutRun) throws EntityNotFoundException;

    /**
	 * Deletes an existing PDutRun with the given id.
	 *
	 * @param pdutrunId The id of the PDutRun to be deleted; value cannot be null.
	 * @return The deleted PDutRun.
	 * @throws EntityNotFoundException if no PDutRun found with the given id.
	 */
	PDutRun delete(BigInteger pdutrunId) throws EntityNotFoundException;

	/**
	 * Find all PDutRuns matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PDutRuns.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PDutRun> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PDutRuns matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PDutRuns.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PDutRun> findAll(String query, Pageable pageable);

    /**
	 * Exports all PDutRuns matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PDutRuns in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PDutRun.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.PDutRun;


/**
 * ServiceImpl object for domain model class PDutRun.
 *
 * @see PDutRun
 */
@Service("NEW_IXTEST_20.PDutRunService")
public class PDutRunServiceImpl implements PDutRunService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PDutRunServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.PDutRunDao")
    private WMGenericDao<PDutRun, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PDutRun, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public PDutRun create(PDutRun pdutRun) {
        LOGGER.debug("Creating a new PDutRun with information: {}", pdutRun);
        PDutRun pdutRunCreated = this.wmGenericDao.create(pdutRun);
        return pdutRunCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRun getById(BigInteger pdutrunId) throws EntityNotFoundException {
        LOGGER.debug("Finding PDutRun by id: {}", pdutrunId);
        PDutRun pdutRun = this.wmGenericDao.findById(pdutrunId);
        if (pdutRun == null){
            LOGGER.debug("No PDutRun found with id: {}", pdutrunId);
            throw new EntityNotFoundException(String.valueOf(pdutrunId));
        }
        return pdutRun;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRun findById(BigInteger pdutrunId) {
        LOGGER.debug("Finding PDutRun by id: {}", pdutrunId);
        return this.wmGenericDao.findById(pdutrunId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRun update(PDutRun pdutRun) throws EntityNotFoundException {
        LOGGER.debug("Updating PDutRun with information: {}", pdutRun);
        this.wmGenericDao.update(pdutRun);

        BigInteger pdutrunId = pdutRun.getId();

        return this.wmGenericDao.findById(pdutrunId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRun delete(BigInteger pdutrunId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PDutRun with id: {}", pdutrunId);
        PDutRun deleted = this.wmGenericDao.findById(pdutrunId);
        if (deleted == null) {
            LOGGER.debug("No PDutRun found with id: {}", pdutrunId);
            throw new EntityNotFoundException(String.valueOf(pdutrunId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<PDutRun> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PDutRuns");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<PDutRun> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PDutRuns");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table PDutRun to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


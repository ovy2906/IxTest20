/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.PDutRunTesting;


/**
 * ServiceImpl object for domain model class PDutRunTesting.
 *
 * @see PDutRunTesting
 */
@Service("NEW_IXTEST_20.PDutRunTestingService")
public class PDutRunTestingServiceImpl implements PDutRunTestingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PDutRunTestingServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.PDutRunTestingDao")
    private WMGenericDao<PDutRunTesting, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PDutRunTesting, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public PDutRunTesting create(PDutRunTesting pdutRunTesting) {
        LOGGER.debug("Creating a new PDutRunTesting with information: {}", pdutRunTesting);
        PDutRunTesting pdutRunTestingCreated = this.wmGenericDao.create(pdutRunTesting);
        return pdutRunTestingCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRunTesting getById(BigInteger pdutruntestingId) throws EntityNotFoundException {
        LOGGER.debug("Finding PDutRunTesting by id: {}", pdutruntestingId);
        PDutRunTesting pdutRunTesting = this.wmGenericDao.findById(pdutruntestingId);
        if (pdutRunTesting == null){
            LOGGER.debug("No PDutRunTesting found with id: {}", pdutruntestingId);
            throw new EntityNotFoundException(String.valueOf(pdutruntestingId));
        }
        return pdutRunTesting;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRunTesting findById(BigInteger pdutruntestingId) {
        LOGGER.debug("Finding PDutRunTesting by id: {}", pdutruntestingId);
        return this.wmGenericDao.findById(pdutruntestingId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRunTesting update(PDutRunTesting pdutRunTesting) throws EntityNotFoundException {
        LOGGER.debug("Updating PDutRunTesting with information: {}", pdutRunTesting);
        this.wmGenericDao.update(pdutRunTesting);

        BigInteger pdutruntestingId = pdutRunTesting.getId();

        return this.wmGenericDao.findById(pdutruntestingId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PDutRunTesting delete(BigInteger pdutruntestingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PDutRunTesting with id: {}", pdutruntestingId);
        PDutRunTesting deleted = this.wmGenericDao.findById(pdutruntestingId);
        if (deleted == null) {
            LOGGER.debug("No PDutRunTesting found with id: {}", pdutruntestingId);
            throw new EntityNotFoundException(String.valueOf(pdutruntestingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<PDutRunTesting> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PDutRunTestings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<PDutRunTesting> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PDutRunTestings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table PDutRunTesting to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.PNetworkRun;

/**
 * Service object for domain model class {@link PNetworkRun}.
 */
public interface PNetworkRunService {

    /**
     * Creates a new PNetworkRun. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PNetworkRun if any.
     *
     * @param pnetworkRun Details of the PNetworkRun to be created; value cannot be null.
     * @return The newly created PNetworkRun.
     */
	PNetworkRun create(PNetworkRun pnetworkRun);


	/**
	 * Returns PNetworkRun by given id if exists.
	 *
	 * @param pnetworkrunId The id of the PNetworkRun to get; value cannot be null.
	 * @return PNetworkRun associated with the given pnetworkrunId.
     * @throws EntityNotFoundException If no PNetworkRun is found.
	 */
	PNetworkRun getById(BigInteger pnetworkrunId) throws EntityNotFoundException;

    /**
	 * Find and return the PNetworkRun by given id if exists, returns null otherwise.
	 *
	 * @param pnetworkrunId The id of the PNetworkRun to get; value cannot be null.
	 * @return PNetworkRun associated with the given pnetworkrunId.
	 */
	PNetworkRun findById(BigInteger pnetworkrunId);


	/**
	 * Updates the details of an existing PNetworkRun. It replaces all fields of the existing PNetworkRun with the given pnetworkRun.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PNetworkRun if any.
     *
	 * @param pnetworkRun The details of the PNetworkRun to be updated; value cannot be null.
	 * @return The updated PNetworkRun.
	 * @throws EntityNotFoundException if no PNetworkRun is found with given input.
	 */
	PNetworkRun update(PNetworkRun pnetworkRun) throws EntityNotFoundException;

    /**
	 * Deletes an existing PNetworkRun with the given id.
	 *
	 * @param pnetworkrunId The id of the PNetworkRun to be deleted; value cannot be null.
	 * @return The deleted PNetworkRun.
	 * @throws EntityNotFoundException if no PNetworkRun found with the given id.
	 */
	PNetworkRun delete(BigInteger pnetworkrunId) throws EntityNotFoundException;

	/**
	 * Find all PNetworkRuns matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PNetworkRuns.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PNetworkRun> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PNetworkRuns matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PNetworkRuns.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PNetworkRun> findAll(String query, Pageable pageable);

    /**
	 * Exports all PNetworkRuns matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PNetworkRuns in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PNetworkRun.
	 */
	long count(String query);


}


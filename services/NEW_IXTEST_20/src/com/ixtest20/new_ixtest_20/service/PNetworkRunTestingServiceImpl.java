/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.PNetworkRunTesting;


/**
 * ServiceImpl object for domain model class PNetworkRunTesting.
 *
 * @see PNetworkRunTesting
 */
@Service("NEW_IXTEST_20.PNetworkRunTestingService")
public class PNetworkRunTestingServiceImpl implements PNetworkRunTestingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PNetworkRunTestingServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.PNetworkRunTestingDao")
    private WMGenericDao<PNetworkRunTesting, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PNetworkRunTesting, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public PNetworkRunTesting create(PNetworkRunTesting pnetworkRunTesting) {
        LOGGER.debug("Creating a new PNetworkRunTesting with information: {}", pnetworkRunTesting);
        PNetworkRunTesting pnetworkRunTestingCreated = this.wmGenericDao.create(pnetworkRunTesting);
        return pnetworkRunTestingCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PNetworkRunTesting getById(BigInteger pnetworkruntestingId) throws EntityNotFoundException {
        LOGGER.debug("Finding PNetworkRunTesting by id: {}", pnetworkruntestingId);
        PNetworkRunTesting pnetworkRunTesting = this.wmGenericDao.findById(pnetworkruntestingId);
        if (pnetworkRunTesting == null){
            LOGGER.debug("No PNetworkRunTesting found with id: {}", pnetworkruntestingId);
            throw new EntityNotFoundException(String.valueOf(pnetworkruntestingId));
        }
        return pnetworkRunTesting;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PNetworkRunTesting findById(BigInteger pnetworkruntestingId) {
        LOGGER.debug("Finding PNetworkRunTesting by id: {}", pnetworkruntestingId);
        return this.wmGenericDao.findById(pnetworkruntestingId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PNetworkRunTesting update(PNetworkRunTesting pnetworkRunTesting) throws EntityNotFoundException {
        LOGGER.debug("Updating PNetworkRunTesting with information: {}", pnetworkRunTesting);
        this.wmGenericDao.update(pnetworkRunTesting);

        BigInteger pnetworkruntestingId = pnetworkRunTesting.getId();

        return this.wmGenericDao.findById(pnetworkruntestingId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public PNetworkRunTesting delete(BigInteger pnetworkruntestingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PNetworkRunTesting with id: {}", pnetworkruntestingId);
        PNetworkRunTesting deleted = this.wmGenericDao.findById(pnetworkruntestingId);
        if (deleted == null) {
            LOGGER.debug("No PNetworkRunTesting found with id: {}", pnetworkruntestingId);
            throw new EntityNotFoundException(String.valueOf(pnetworkruntestingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<PNetworkRunTesting> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PNetworkRunTestings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<PNetworkRunTesting> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PNetworkRunTestings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table PNetworkRunTesting to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


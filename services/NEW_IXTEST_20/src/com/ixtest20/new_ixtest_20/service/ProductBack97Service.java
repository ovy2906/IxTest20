/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.ProductBack97;

/**
 * Service object for domain model class {@link ProductBack97}.
 */
public interface ProductBack97Service {

    /**
     * Creates a new ProductBack97. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ProductBack97 if any.
     *
     * @param productBack97 Details of the ProductBack97 to be created; value cannot be null.
     * @return The newly created ProductBack97.
     */
	ProductBack97 create(ProductBack97 productBack97);


	/**
	 * Returns ProductBack97 by given id if exists.
	 *
	 * @param productback97Id The id of the ProductBack97 to get; value cannot be null.
	 * @return ProductBack97 associated with the given productback97Id.
     * @throws EntityNotFoundException If no ProductBack97 is found.
	 */
	ProductBack97 getById(BigInteger productback97Id) throws EntityNotFoundException;

    /**
	 * Find and return the ProductBack97 by given id if exists, returns null otherwise.
	 *
	 * @param productback97Id The id of the ProductBack97 to get; value cannot be null.
	 * @return ProductBack97 associated with the given productback97Id.
	 */
	ProductBack97 findById(BigInteger productback97Id);


	/**
	 * Updates the details of an existing ProductBack97. It replaces all fields of the existing ProductBack97 with the given productBack97.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on ProductBack97 if any.
     *
	 * @param productBack97 The details of the ProductBack97 to be updated; value cannot be null.
	 * @return The updated ProductBack97.
	 * @throws EntityNotFoundException if no ProductBack97 is found with given input.
	 */
	ProductBack97 update(ProductBack97 productBack97) throws EntityNotFoundException;

    /**
	 * Deletes an existing ProductBack97 with the given id.
	 *
	 * @param productback97Id The id of the ProductBack97 to be deleted; value cannot be null.
	 * @return The deleted ProductBack97.
	 * @throws EntityNotFoundException if no ProductBack97 found with the given id.
	 */
	ProductBack97 delete(BigInteger productback97Id) throws EntityNotFoundException;

	/**
	 * Find all ProductBack97s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ProductBack97s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<ProductBack97> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all ProductBack97s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ProductBack97s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<ProductBack97> findAll(String query, Pageable pageable);

    /**
	 * Exports all ProductBack97s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ProductBack97s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the ProductBack97.
	 */
	long count(String query);


}


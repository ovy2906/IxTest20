/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.ProductsBack;

/**
 * Service object for domain model class {@link ProductsBack}.
 */
public interface ProductsBackService {

    /**
     * Creates a new ProductsBack. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ProductsBack if any.
     *
     * @param productsBack Details of the ProductsBack to be created; value cannot be null.
     * @return The newly created ProductsBack.
     */
	ProductsBack create(ProductsBack productsBack);


	/**
	 * Returns ProductsBack by given id if exists.
	 *
	 * @param productsbackId The id of the ProductsBack to get; value cannot be null.
	 * @return ProductsBack associated with the given productsbackId.
     * @throws EntityNotFoundException If no ProductsBack is found.
	 */
	ProductsBack getById(BigInteger productsbackId) throws EntityNotFoundException;

    /**
	 * Find and return the ProductsBack by given id if exists, returns null otherwise.
	 *
	 * @param productsbackId The id of the ProductsBack to get; value cannot be null.
	 * @return ProductsBack associated with the given productsbackId.
	 */
	ProductsBack findById(BigInteger productsbackId);


	/**
	 * Updates the details of an existing ProductsBack. It replaces all fields of the existing ProductsBack with the given productsBack.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on ProductsBack if any.
     *
	 * @param productsBack The details of the ProductsBack to be updated; value cannot be null.
	 * @return The updated ProductsBack.
	 * @throws EntityNotFoundException if no ProductsBack is found with given input.
	 */
	ProductsBack update(ProductsBack productsBack) throws EntityNotFoundException;

    /**
	 * Deletes an existing ProductsBack with the given id.
	 *
	 * @param productsbackId The id of the ProductsBack to be deleted; value cannot be null.
	 * @return The deleted ProductsBack.
	 * @throws EntityNotFoundException if no ProductsBack found with the given id.
	 */
	ProductsBack delete(BigInteger productsbackId) throws EntityNotFoundException;

	/**
	 * Find all ProductsBacks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ProductsBacks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<ProductsBack> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all ProductsBacks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ProductsBacks.
     *
     * @see Pageable
     * @see Page
	 */
    Page<ProductsBack> findAll(String query, Pageable pageable);

    /**
	 * Exports all ProductsBacks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ProductsBacks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the ProductsBack.
	 */
	long count(String query);


}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.ProductsBack;


/**
 * ServiceImpl object for domain model class ProductsBack.
 *
 * @see ProductsBack
 */
@Service("NEW_IXTEST_20.ProductsBackService")
public class ProductsBackServiceImpl implements ProductsBackService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsBackServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.ProductsBackDao")
    private WMGenericDao<ProductsBack, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProductsBack, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public ProductsBack create(ProductsBack productsBack) {
        LOGGER.debug("Creating a new ProductsBack with information: {}", productsBack);
        ProductsBack productsBackCreated = this.wmGenericDao.create(productsBack);
        return productsBackCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public ProductsBack getById(BigInteger productsbackId) throws EntityNotFoundException {
        LOGGER.debug("Finding ProductsBack by id: {}", productsbackId);
        ProductsBack productsBack = this.wmGenericDao.findById(productsbackId);
        if (productsBack == null){
            LOGGER.debug("No ProductsBack found with id: {}", productsbackId);
            throw new EntityNotFoundException(String.valueOf(productsbackId));
        }
        return productsBack;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public ProductsBack findById(BigInteger productsbackId) {
        LOGGER.debug("Finding ProductsBack by id: {}", productsbackId);
        return this.wmGenericDao.findById(productsbackId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public ProductsBack update(ProductsBack productsBack) throws EntityNotFoundException {
        LOGGER.debug("Updating ProductsBack with information: {}", productsBack);
        this.wmGenericDao.update(productsBack);

        BigInteger productsbackId = productsBack.getProductid();

        return this.wmGenericDao.findById(productsbackId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public ProductsBack delete(BigInteger productsbackId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProductsBack with id: {}", productsbackId);
        ProductsBack deleted = this.wmGenericDao.findById(productsbackId);
        if (deleted == null) {
            LOGGER.debug("No ProductsBack found with id: {}", productsbackId);
            throw new EntityNotFoundException(String.valueOf(productsbackId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<ProductsBack> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProductsBacks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<ProductsBack> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProductsBacks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table ProductsBack to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


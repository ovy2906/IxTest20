/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.RecycleTable;


/**
 * ServiceImpl object for domain model class RecycleTable.
 *
 * @see RecycleTable
 */
@Service("NEW_IXTEST_20.RecycleTableService")
public class RecycleTableServiceImpl implements RecycleTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RecycleTableServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.RecycleTableDao")
    private WMGenericDao<RecycleTable, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RecycleTable, BigDecimal> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public RecycleTable create(RecycleTable recycleTable) {
        LOGGER.debug("Creating a new RecycleTable with information: {}", recycleTable);
        RecycleTable recycleTableCreated = this.wmGenericDao.create(recycleTable);
        return recycleTableCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public RecycleTable getById(BigDecimal recycletableId) throws EntityNotFoundException {
        LOGGER.debug("Finding RecycleTable by id: {}", recycletableId);
        RecycleTable recycleTable = this.wmGenericDao.findById(recycletableId);
        if (recycleTable == null){
            LOGGER.debug("No RecycleTable found with id: {}", recycletableId);
            throw new EntityNotFoundException(String.valueOf(recycletableId));
        }
        return recycleTable;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public RecycleTable findById(BigDecimal recycletableId) {
        LOGGER.debug("Finding RecycleTable by id: {}", recycletableId);
        return this.wmGenericDao.findById(recycletableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public RecycleTable update(RecycleTable recycleTable) throws EntityNotFoundException {
        LOGGER.debug("Updating RecycleTable with information: {}", recycleTable);
        this.wmGenericDao.update(recycleTable);

        BigDecimal recycletableId = recycleTable.getIdRecycle();

        return this.wmGenericDao.findById(recycletableId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public RecycleTable delete(BigDecimal recycletableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RecycleTable with id: {}", recycletableId);
        RecycleTable deleted = this.wmGenericDao.findById(recycletableId);
        if (deleted == null) {
            LOGGER.debug("No RecycleTable found with id: {}", recycletableId);
            throw new EntityNotFoundException(String.valueOf(recycletableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<RecycleTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RecycleTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<RecycleTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RecycleTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table RecycleTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


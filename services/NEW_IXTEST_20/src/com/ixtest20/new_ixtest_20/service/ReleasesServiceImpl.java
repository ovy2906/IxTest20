/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Releases;


/**
 * ServiceImpl object for domain model class Releases.
 *
 * @see Releases
 */
@Service("NEW_IXTEST_20.ReleasesService")
public class ReleasesServiceImpl implements ReleasesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReleasesServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.ReleasesDao")
    private WMGenericDao<Releases, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Releases, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Releases create(Releases releases) {
        LOGGER.debug("Creating a new Releases with information: {}", releases);
        Releases releasesCreated = this.wmGenericDao.create(releases);
        return releasesCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Releases getById(Integer releasesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Releases by id: {}", releasesId);
        Releases releases = this.wmGenericDao.findById(releasesId);
        if (releases == null){
            LOGGER.debug("No Releases found with id: {}", releasesId);
            throw new EntityNotFoundException(String.valueOf(releasesId));
        }
        return releases;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Releases findById(Integer releasesId) {
        LOGGER.debug("Finding Releases by id: {}", releasesId);
        return this.wmGenericDao.findById(releasesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Releases update(Releases releases) throws EntityNotFoundException {
        LOGGER.debug("Updating Releases with information: {}", releases);
        this.wmGenericDao.update(releases);

        Integer releasesId = releases.getReleaseid();

        return this.wmGenericDao.findById(releasesId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Releases delete(Integer releasesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Releases with id: {}", releasesId);
        Releases deleted = this.wmGenericDao.findById(releasesId);
        if (deleted == null) {
            LOGGER.debug("No Releases found with id: {}", releasesId);
            throw new EntityNotFoundException(String.valueOf(releasesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Releases> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Releases");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Releases> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Releases");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Releases to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Result;

/**
 * Service object for domain model class {@link Result}.
 */
public interface ResultService {

    /**
     * Creates a new Result. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Result if any.
     *
     * @param result Details of the Result to be created; value cannot be null.
     * @return The newly created Result.
     */
	Result create(Result result);


	/**
	 * Returns Result by given id if exists.
	 *
	 * @param resultId The id of the Result to get; value cannot be null.
	 * @return Result associated with the given resultId.
     * @throws EntityNotFoundException If no Result is found.
	 */
	Result getById(BigInteger resultId) throws EntityNotFoundException;

    /**
	 * Find and return the Result by given id if exists, returns null otherwise.
	 *
	 * @param resultId The id of the Result to get; value cannot be null.
	 * @return Result associated with the given resultId.
	 */
	Result findById(BigInteger resultId);


	/**
	 * Updates the details of an existing Result. It replaces all fields of the existing Result with the given result.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Result if any.
     *
	 * @param result The details of the Result to be updated; value cannot be null.
	 * @return The updated Result.
	 * @throws EntityNotFoundException if no Result is found with given input.
	 */
	Result update(Result result) throws EntityNotFoundException;

    /**
	 * Deletes an existing Result with the given id.
	 *
	 * @param resultId The id of the Result to be deleted; value cannot be null.
	 * @return The deleted Result.
	 * @throws EntityNotFoundException if no Result found with the given id.
	 */
	Result delete(BigInteger resultId) throws EntityNotFoundException;

	/**
	 * Find all Results matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Results.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Result> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Results matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Results.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Result> findAll(String query, Pageable pageable);

    /**
	 * Exports all Results matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Results in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Result.
	 */
	long count(String query);


}


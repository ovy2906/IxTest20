/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.TestcasesBack;

/**
 * Service object for domain model class {@link TestcasesBack}.
 */
public interface TestcasesBackService {

    /**
     * Creates a new TestcasesBack. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TestcasesBack if any.
     *
     * @param testcasesBack Details of the TestcasesBack to be created; value cannot be null.
     * @return The newly created TestcasesBack.
     */
	TestcasesBack create(TestcasesBack testcasesBack);


	/**
	 * Returns TestcasesBack by given id if exists.
	 *
	 * @param testcasesbackId The id of the TestcasesBack to get; value cannot be null.
	 * @return TestcasesBack associated with the given testcasesbackId.
     * @throws EntityNotFoundException If no TestcasesBack is found.
	 */
	TestcasesBack getById(BigInteger testcasesbackId) throws EntityNotFoundException;

    /**
	 * Find and return the TestcasesBack by given id if exists, returns null otherwise.
	 *
	 * @param testcasesbackId The id of the TestcasesBack to get; value cannot be null.
	 * @return TestcasesBack associated with the given testcasesbackId.
	 */
	TestcasesBack findById(BigInteger testcasesbackId);


	/**
	 * Updates the details of an existing TestcasesBack. It replaces all fields of the existing TestcasesBack with the given testcasesBack.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TestcasesBack if any.
     *
	 * @param testcasesBack The details of the TestcasesBack to be updated; value cannot be null.
	 * @return The updated TestcasesBack.
	 * @throws EntityNotFoundException if no TestcasesBack is found with given input.
	 */
	TestcasesBack update(TestcasesBack testcasesBack) throws EntityNotFoundException;

    /**
	 * Deletes an existing TestcasesBack with the given id.
	 *
	 * @param testcasesbackId The id of the TestcasesBack to be deleted; value cannot be null.
	 * @return The deleted TestcasesBack.
	 * @throws EntityNotFoundException if no TestcasesBack found with the given id.
	 */
	TestcasesBack delete(BigInteger testcasesbackId) throws EntityNotFoundException;

	/**
	 * Find all TestcasesBacks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestcasesBacks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TestcasesBack> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TestcasesBacks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestcasesBacks.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TestcasesBack> findAll(String query, Pageable pageable);

    /**
	 * Exports all TestcasesBacks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TestcasesBacks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TestcasesBack.
	 */
	long count(String query);


}


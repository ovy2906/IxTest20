/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Testcaserun;
import com.ixtest20.new_ixtest_20.Testcases;

/**
 * Service object for domain model class {@link Testcases}.
 */
public interface TestcasesService {

    /**
     * Creates a new Testcases. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Testcases if any.
     *
     * @param testcases Details of the Testcases to be created; value cannot be null.
     * @return The newly created Testcases.
     */
	Testcases create(Testcases testcases);


	/**
	 * Returns Testcases by given id if exists.
	 *
	 * @param testcasesId The id of the Testcases to get; value cannot be null.
	 * @return Testcases associated with the given testcasesId.
     * @throws EntityNotFoundException If no Testcases is found.
	 */
	Testcases getById(BigInteger testcasesId) throws EntityNotFoundException;

    /**
	 * Find and return the Testcases by given id if exists, returns null otherwise.
	 *
	 * @param testcasesId The id of the Testcases to get; value cannot be null.
	 * @return Testcases associated with the given testcasesId.
	 */
	Testcases findById(BigInteger testcasesId);


	/**
	 * Updates the details of an existing Testcases. It replaces all fields of the existing Testcases with the given testcases.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Testcases if any.
     *
	 * @param testcases The details of the Testcases to be updated; value cannot be null.
	 * @return The updated Testcases.
	 * @throws EntityNotFoundException if no Testcases is found with given input.
	 */
	Testcases update(Testcases testcases) throws EntityNotFoundException;

    /**
	 * Deletes an existing Testcases with the given id.
	 *
	 * @param testcasesId The id of the Testcases to be deleted; value cannot be null.
	 * @return The deleted Testcases.
	 * @throws EntityNotFoundException if no Testcases found with the given id.
	 */
	Testcases delete(BigInteger testcasesId) throws EntityNotFoundException;

	/**
	 * Find all Testcases matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Testcases.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Testcases> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Testcases matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Testcases.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Testcases> findAll(String query, Pageable pageable);

    /**
	 * Exports all Testcases matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Testcases in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Testcases.
	 */
	long count(String query);

    /*
     * Returns the associated testcaseruns for given Testcases id.
     *
     * @param testcaseid value of testcaseid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Testcaserun instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Testcaserun> findAssociatedTestcaseruns(BigInteger testcaseid, Pageable pageable);

}


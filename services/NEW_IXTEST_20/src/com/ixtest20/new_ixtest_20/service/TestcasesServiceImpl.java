/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Testcaserun;
import com.ixtest20.new_ixtest_20.Testcases;


/**
 * ServiceImpl object for domain model class Testcases.
 *
 * @see Testcases
 */
@Service("NEW_IXTEST_20.TestcasesService")
public class TestcasesServiceImpl implements TestcasesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestcasesServiceImpl.class);

    @Autowired
	@Qualifier("NEW_IXTEST_20.TestcaserunService")
	private TestcaserunService testcaserunService;

    @Autowired
    @Qualifier("NEW_IXTEST_20.TestcasesDao")
    private WMGenericDao<Testcases, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Testcases, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Testcases create(Testcases testcases) {
        LOGGER.debug("Creating a new Testcases with information: {}", testcases);
        Testcases testcasesCreated = this.wmGenericDao.create(testcases);
        if(testcasesCreated.getTestcaseruns() != null) {
            for(Testcaserun testcaserun : testcasesCreated.getTestcaseruns()) {
                testcaserun.setTestcases(testcasesCreated);
                LOGGER.debug("Creating a new child Testcaserun with information: {}", testcaserun);
                testcaserunService.create(testcaserun);
            }
        }
        return testcasesCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testcases getById(BigInteger testcasesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Testcases by id: {}", testcasesId);
        Testcases testcases = this.wmGenericDao.findById(testcasesId);
        if (testcases == null){
            LOGGER.debug("No Testcases found with id: {}", testcasesId);
            throw new EntityNotFoundException(String.valueOf(testcasesId));
        }
        return testcases;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testcases findById(BigInteger testcasesId) {
        LOGGER.debug("Finding Testcases by id: {}", testcasesId);
        return this.wmGenericDao.findById(testcasesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testcases update(Testcases testcases) throws EntityNotFoundException {
        LOGGER.debug("Updating Testcases with information: {}", testcases);
        this.wmGenericDao.update(testcases);

        BigInteger testcasesId = testcases.getTestcaseid();

        return this.wmGenericDao.findById(testcasesId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testcases delete(BigInteger testcasesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Testcases with id: {}", testcasesId);
        Testcases deleted = this.wmGenericDao.findById(testcasesId);
        if (deleted == null) {
            LOGGER.debug("No Testcases found with id: {}", testcasesId);
            throw new EntityNotFoundException(String.valueOf(testcasesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Testcases> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Testcases");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Testcases> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Testcases");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Testcases to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Testcaserun> findAssociatedTestcaseruns(BigInteger testcaseid, Pageable pageable) {
        LOGGER.debug("Fetching all associated testcaseruns");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("testcases.testcaseid = '" + testcaseid + "'");

        return testcaserunService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestcaserunService instance
	 */
	protected void setTestcaserunService(TestcaserunService service) {
        this.testcaserunService = service;
    }

}


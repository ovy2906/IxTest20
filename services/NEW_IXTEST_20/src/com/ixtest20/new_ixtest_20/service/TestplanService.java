/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Testplan;
import com.ixtest20.new_ixtest_20.TestplanId;

/**
 * Service object for domain model class {@link Testplan}.
 */
public interface TestplanService {

    /**
     * Creates a new Testplan. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Testplan if any.
     *
     * @param testplan Details of the Testplan to be created; value cannot be null.
     * @return The newly created Testplan.
     */
	Testplan create(Testplan testplan);


	/**
	 * Returns Testplan by given id if exists.
	 *
	 * @param testplanId The id of the Testplan to get; value cannot be null.
	 * @return Testplan associated with the given testplanId.
     * @throws EntityNotFoundException If no Testplan is found.
	 */
	Testplan getById(TestplanId testplanId) throws EntityNotFoundException;

    /**
	 * Find and return the Testplan by given id if exists, returns null otherwise.
	 *
	 * @param testplanId The id of the Testplan to get; value cannot be null.
	 * @return Testplan associated with the given testplanId.
	 */
	Testplan findById(TestplanId testplanId);


	/**
	 * Updates the details of an existing Testplan. It replaces all fields of the existing Testplan with the given testplan.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Testplan if any.
     *
	 * @param testplan The details of the Testplan to be updated; value cannot be null.
	 * @return The updated Testplan.
	 * @throws EntityNotFoundException if no Testplan is found with given input.
	 */
	Testplan update(Testplan testplan) throws EntityNotFoundException;

    /**
	 * Deletes an existing Testplan with the given id.
	 *
	 * @param testplanId The id of the Testplan to be deleted; value cannot be null.
	 * @return The deleted Testplan.
	 * @throws EntityNotFoundException if no Testplan found with the given id.
	 */
	Testplan delete(TestplanId testplanId) throws EntityNotFoundException;

	/**
	 * Find all Testplans matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Testplans.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Testplan> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Testplans matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Testplans.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Testplan> findAll(String query, Pageable pageable);

    /**
	 * Exports all Testplans matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Testplans in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Testplan.
	 */
	long count(String query);


}


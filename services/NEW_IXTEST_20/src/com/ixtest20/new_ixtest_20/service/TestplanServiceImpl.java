/*Copyright (c) 2017-2018 ixiacom.com All Rights Reserved.
 This software is the confidential and proprietary information of ixiacom.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with ixiacom.com*/
package com.ixtest20.new_ixtest_20.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.ixtest20.new_ixtest_20.Testplan;
import com.ixtest20.new_ixtest_20.TestplanId;


/**
 * ServiceImpl object for domain model class Testplan.
 *
 * @see Testplan
 */
@Service("NEW_IXTEST_20.TestplanService")
public class TestplanServiceImpl implements TestplanService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestplanServiceImpl.class);


    @Autowired
    @Qualifier("NEW_IXTEST_20.TestplanDao")
    private WMGenericDao<Testplan, TestplanId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Testplan, TestplanId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
    @Override
	public Testplan create(Testplan testplan) {
        LOGGER.debug("Creating a new Testplan with information: {}", testplan);
        Testplan testplanCreated = this.wmGenericDao.create(testplan);
        return testplanCreated;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testplan getById(TestplanId testplanId) throws EntityNotFoundException {
        LOGGER.debug("Finding Testplan by id: {}", testplanId);
        Testplan testplan = this.wmGenericDao.findById(testplanId);
        if (testplan == null){
            LOGGER.debug("No Testplan found with id: {}", testplanId);
            throw new EntityNotFoundException(String.valueOf(testplanId));
        }
        return testplan;
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testplan findById(TestplanId testplanId) {
        LOGGER.debug("Finding Testplan by id: {}", testplanId);
        return this.wmGenericDao.findById(testplanId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testplan update(Testplan testplan) throws EntityNotFoundException {
        LOGGER.debug("Updating Testplan with information: {}", testplan);
        this.wmGenericDao.update(testplan);

        TestplanId testplanId = new TestplanId();
        testplanId.setBranchid(testplan.getBranchid());
        testplanId.setBranchname(testplan.getBranchname());
        testplanId.setProductid(testplan.getProductid());
        testplanId.setEnginename(testplan.getEnginename());
        testplanId.setMaxtestcases(testplan.getMaxtestcases());
        testplanId.setUpdatedby(testplan.getUpdatedby());
        testplanId.setUpdatedon(testplan.getUpdatedon());
        testplanId.setStatus(testplan.getStatus());

        return this.wmGenericDao.findById(testplanId);
    }

    @Transactional(value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Testplan delete(TestplanId testplanId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Testplan with id: {}", testplanId);
        Testplan deleted = this.wmGenericDao.findById(testplanId);
        if (deleted == null) {
            LOGGER.debug("No Testplan found with id: {}", testplanId);
            throw new EntityNotFoundException(String.valueOf(testplanId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public Page<Testplan> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Testplans");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Page<Testplan> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Testplans");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NEW_IXTEST_20 for table Testplan to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NEW_IXTEST_20TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

